// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/certificate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// Certificate is the model entity for the Certificate schema.
type Certificate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 证书名称
	Name string `json:"name,omitempty"`
	// 证书代码
	Code string `json:"code,omitempty"`
	// 证书描述
	Description string `json:"description,omitempty"`
	// 颁发部门
	Department string `json:"department,omitempty"`
	// 颁发日期
	IssueDate time.Time `json:"issue_date,omitempty"`
	// 证书类型
	CertificateType string `json:"certificate_type,omitempty"`
	// 证书级别
	CertificateLevel string `json:"certificate_level,omitempty"`
	// 证书类别
	CertificateType2 string `json:"certificate_type2,omitempty"`
	// 获奖类别
	AwardCategory string `json:"award_category,omitempty"`
	// 证书图片
	CertificateImage []byte `json:"certificate_image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificateQuery when eager-loading is set.
	Edges               CertificateEdges `json:"edges"`
	certificate_student *int
}

// CertificateEdges holds the relations/edges for other nodes in the graph.
type CertificateEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificateEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certificate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certificate.FieldCertificateImage:
			values[i] = new([]byte)
		case certificate.FieldID:
			values[i] = new(sql.NullInt64)
		case certificate.FieldName, certificate.FieldCode, certificate.FieldDescription, certificate.FieldDepartment, certificate.FieldCertificateType, certificate.FieldCertificateLevel, certificate.FieldCertificateType2, certificate.FieldAwardCategory:
			values[i] = new(sql.NullString)
		case certificate.FieldIssueDate:
			values[i] = new(sql.NullTime)
		case certificate.ForeignKeys[0]: // certificate_student
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Certificate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certificate fields.
func (c *Certificate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certificate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case certificate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case certificate.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case certificate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case certificate.FieldDepartment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department", values[i])
			} else if value.Valid {
				c.Department = value.String
			}
		case certificate.FieldIssueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issue_date", values[i])
			} else if value.Valid {
				c.IssueDate = value.Time
			}
		case certificate.FieldCertificateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_type", values[i])
			} else if value.Valid {
				c.CertificateType = value.String
			}
		case certificate.FieldCertificateLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_level", values[i])
			} else if value.Valid {
				c.CertificateLevel = value.String
			}
		case certificate.FieldCertificateType2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_type2", values[i])
			} else if value.Valid {
				c.CertificateType2 = value.String
			}
		case certificate.FieldAwardCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field award_category", values[i])
			} else if value.Valid {
				c.AwardCategory = value.String
			}
		case certificate.FieldCertificateImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_image", values[i])
			} else if value != nil {
				c.CertificateImage = *value
			}
		case certificate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field certificate_student", value)
			} else if value.Valid {
				c.certificate_student = new(int)
				*c.certificate_student = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the Certificate entity.
func (c *Certificate) QueryStudent() *StudentQuery {
	return NewCertificateClient(c.config).QueryStudent(c)
}

// Update returns a builder for updating this Certificate.
// Note that you need to call Certificate.Unwrap() before calling this method if this Certificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certificate) Update() *CertificateUpdateOne {
	return NewCertificateClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Certificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certificate) Unwrap() *Certificate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("domain: Certificate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certificate) String() string {
	var builder strings.Builder
	builder.WriteString("Certificate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("department=")
	builder.WriteString(c.Department)
	builder.WriteString(", ")
	builder.WriteString("issue_date=")
	builder.WriteString(c.IssueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("certificate_type=")
	builder.WriteString(c.CertificateType)
	builder.WriteString(", ")
	builder.WriteString("certificate_level=")
	builder.WriteString(c.CertificateLevel)
	builder.WriteString(", ")
	builder.WriteString("certificate_type2=")
	builder.WriteString(c.CertificateType2)
	builder.WriteString(", ")
	builder.WriteString("award_category=")
	builder.WriteString(c.AwardCategory)
	builder.WriteString(", ")
	builder.WriteString("certificate_image=")
	builder.WriteString(fmt.Sprintf("%v", c.CertificateImage))
	builder.WriteByte(')')
	return builder.String()
}

// Certificates is a parsable slice of Certificate.
type Certificates []*Certificate
