// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// ClassLeaderQuery is the builder for querying ClassLeader entities.
type ClassLeaderQuery struct {
	config
	ctx         *QueryContext
	order       []OrderFunc
	inters      []Interceptor
	predicates  []predicate.ClassLeader
	withClass   *ClassQuery
	withStudent *StudentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClassLeaderQuery builder.
func (clq *ClassLeaderQuery) Where(ps ...predicate.ClassLeader) *ClassLeaderQuery {
	clq.predicates = append(clq.predicates, ps...)
	return clq
}

// Limit the number of records to be returned by this query.
func (clq *ClassLeaderQuery) Limit(limit int) *ClassLeaderQuery {
	clq.ctx.Limit = &limit
	return clq
}

// Offset to start from.
func (clq *ClassLeaderQuery) Offset(offset int) *ClassLeaderQuery {
	clq.ctx.Offset = &offset
	return clq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clq *ClassLeaderQuery) Unique(unique bool) *ClassLeaderQuery {
	clq.ctx.Unique = &unique
	return clq
}

// Order specifies how the records should be ordered.
func (clq *ClassLeaderQuery) Order(o ...OrderFunc) *ClassLeaderQuery {
	clq.order = append(clq.order, o...)
	return clq
}

// QueryClass chains the current query on the "class" edge.
func (clq *ClassLeaderQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classleader.Table, classleader.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, classleader.ClassTable, classleader.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStudent chains the current query on the "student" edge.
func (clq *ClassLeaderQuery) QueryStudent() *StudentQuery {
	query := (&StudentClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classleader.Table, classleader.FieldID, selector),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, classleader.StudentTable, classleader.StudentColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ClassLeader entity from the query.
// Returns a *NotFoundError when no ClassLeader was found.
func (clq *ClassLeaderQuery) First(ctx context.Context) (*ClassLeader, error) {
	nodes, err := clq.Limit(1).All(setContextOp(ctx, clq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{classleader.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clq *ClassLeaderQuery) FirstX(ctx context.Context) *ClassLeader {
	node, err := clq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ClassLeader ID from the query.
// Returns a *NotFoundError when no ClassLeader ID was found.
func (clq *ClassLeaderQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(1).IDs(setContextOp(ctx, clq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{classleader.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clq *ClassLeaderQuery) FirstIDX(ctx context.Context) int {
	id, err := clq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ClassLeader entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClassLeader entity is found.
// Returns a *NotFoundError when no ClassLeader entities are found.
func (clq *ClassLeaderQuery) Only(ctx context.Context) (*ClassLeader, error) {
	nodes, err := clq.Limit(2).All(setContextOp(ctx, clq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{classleader.Label}
	default:
		return nil, &NotSingularError{classleader.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clq *ClassLeaderQuery) OnlyX(ctx context.Context) *ClassLeader {
	node, err := clq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ClassLeader ID in the query.
// Returns a *NotSingularError when more than one ClassLeader ID is found.
// Returns a *NotFoundError when no entities are found.
func (clq *ClassLeaderQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(2).IDs(setContextOp(ctx, clq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{classleader.Label}
	default:
		err = &NotSingularError{classleader.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clq *ClassLeaderQuery) OnlyIDX(ctx context.Context) int {
	id, err := clq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ClassLeaders.
func (clq *ClassLeaderQuery) All(ctx context.Context) ([]*ClassLeader, error) {
	ctx = setContextOp(ctx, clq.ctx, "All")
	if err := clq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ClassLeader, *ClassLeaderQuery]()
	return withInterceptors[[]*ClassLeader](ctx, clq, qr, clq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clq *ClassLeaderQuery) AllX(ctx context.Context) []*ClassLeader {
	nodes, err := clq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ClassLeader IDs.
func (clq *ClassLeaderQuery) IDs(ctx context.Context) (ids []int, err error) {
	if clq.ctx.Unique == nil && clq.path != nil {
		clq.Unique(true)
	}
	ctx = setContextOp(ctx, clq.ctx, "IDs")
	if err = clq.Select(classleader.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clq *ClassLeaderQuery) IDsX(ctx context.Context) []int {
	ids, err := clq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clq *ClassLeaderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clq.ctx, "Count")
	if err := clq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clq, querierCount[*ClassLeaderQuery](), clq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clq *ClassLeaderQuery) CountX(ctx context.Context) int {
	count, err := clq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clq *ClassLeaderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clq.ctx, "Exist")
	switch _, err := clq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("domain: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clq *ClassLeaderQuery) ExistX(ctx context.Context) bool {
	exist, err := clq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClassLeaderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clq *ClassLeaderQuery) Clone() *ClassLeaderQuery {
	if clq == nil {
		return nil
	}
	return &ClassLeaderQuery{
		config:      clq.config,
		ctx:         clq.ctx.Clone(),
		order:       append([]OrderFunc{}, clq.order...),
		inters:      append([]Interceptor{}, clq.inters...),
		predicates:  append([]predicate.ClassLeader{}, clq.predicates...),
		withClass:   clq.withClass.Clone(),
		withStudent: clq.withStudent.Clone(),
		// clone intermediate query.
		sql:  clq.sql.Clone(),
		path: clq.path,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ClassLeaderQuery) WithClass(opts ...func(*ClassQuery)) *ClassLeaderQuery {
	query := (&ClassClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withClass = query
	return clq
}

// WithStudent tells the query-builder to eager-load the nodes that are connected to
// the "student" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ClassLeaderQuery) WithStudent(opts ...func(*StudentQuery)) *ClassLeaderQuery {
	query := (&StudentClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withStudent = query
	return clq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (clq *ClassLeaderQuery) GroupBy(field string, fields ...string) *ClassLeaderGroupBy {
	clq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClassLeaderGroupBy{build: clq}
	grbuild.flds = &clq.ctx.Fields
	grbuild.label = classleader.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (clq *ClassLeaderQuery) Select(fields ...string) *ClassLeaderSelect {
	clq.ctx.Fields = append(clq.ctx.Fields, fields...)
	sbuild := &ClassLeaderSelect{ClassLeaderQuery: clq}
	sbuild.label = classleader.Label
	sbuild.flds, sbuild.scan = &clq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClassLeaderSelect configured with the given aggregations.
func (clq *ClassLeaderQuery) Aggregate(fns ...AggregateFunc) *ClassLeaderSelect {
	return clq.Select().Aggregate(fns...)
}

func (clq *ClassLeaderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clq.inters {
		if inter == nil {
			return fmt.Errorf("domain: uninitialized interceptor (forgotten import domain/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clq); err != nil {
				return err
			}
		}
	}
	for _, f := range clq.ctx.Fields {
		if !classleader.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
		}
	}
	if clq.path != nil {
		prev, err := clq.path(ctx)
		if err != nil {
			return err
		}
		clq.sql = prev
	}
	return nil
}

func (clq *ClassLeaderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClassLeader, error) {
	var (
		nodes       = []*ClassLeader{}
		_spec       = clq.querySpec()
		loadedTypes = [2]bool{
			clq.withClass != nil,
			clq.withStudent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ClassLeader).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ClassLeader{config: clq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clq.withClass; query != nil {
		if err := clq.loadClass(ctx, query, nodes, nil,
			func(n *ClassLeader, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	if query := clq.withStudent; query != nil {
		if err := clq.loadStudent(ctx, query, nodes, nil,
			func(n *ClassLeader, e *Student) { n.Edges.Student = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clq *ClassLeaderQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*ClassLeader, init func(*ClassLeader), assign func(*ClassLeader, *Class)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ClassLeader)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Class(func(s *sql.Selector) {
		s.Where(sql.InValues(classleader.ClassColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.class_leader_class
		if fk == nil {
			return fmt.Errorf(`foreign-key "class_leader_class" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_leader_class" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (clq *ClassLeaderQuery) loadStudent(ctx context.Context, query *StudentQuery, nodes []*ClassLeader, init func(*ClassLeader), assign func(*ClassLeader, *Student)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ClassLeader)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Student(func(s *sql.Selector) {
		s.Where(sql.InValues(classleader.StudentColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.class_leader_student
		if fk == nil {
			return fmt.Errorf(`foreign-key "class_leader_student" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_leader_student" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (clq *ClassLeaderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clq.querySpec()
	_spec.Node.Columns = clq.ctx.Fields
	if len(clq.ctx.Fields) > 0 {
		_spec.Unique = clq.ctx.Unique != nil && *clq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clq.driver, _spec)
}

func (clq *ClassLeaderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(classleader.Table, classleader.Columns, sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt))
	_spec.From = clq.sql
	if unique := clq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clq.path != nil {
		_spec.Unique = true
	}
	if fields := clq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classleader.FieldID)
		for i := range fields {
			if fields[i] != classleader.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := clq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clq *ClassLeaderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clq.driver.Dialect())
	t1 := builder.Table(classleader.Table)
	columns := clq.ctx.Fields
	if len(columns) == 0 {
		columns = classleader.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clq.sql != nil {
		selector = clq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clq.ctx.Unique != nil && *clq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range clq.predicates {
		p(selector)
	}
	for _, p := range clq.order {
		p(selector)
	}
	if offset := clq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClassLeaderGroupBy is the group-by builder for ClassLeader entities.
type ClassLeaderGroupBy struct {
	selector
	build *ClassLeaderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clgb *ClassLeaderGroupBy) Aggregate(fns ...AggregateFunc) *ClassLeaderGroupBy {
	clgb.fns = append(clgb.fns, fns...)
	return clgb
}

// Scan applies the selector query and scans the result into the given value.
func (clgb *ClassLeaderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clgb.build.ctx, "GroupBy")
	if err := clgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassLeaderQuery, *ClassLeaderGroupBy](ctx, clgb.build, clgb, clgb.build.inters, v)
}

func (clgb *ClassLeaderGroupBy) sqlScan(ctx context.Context, root *ClassLeaderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clgb.fns))
	for _, fn := range clgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clgb.flds)+len(clgb.fns))
		for _, f := range *clgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClassLeaderSelect is the builder for selecting fields of ClassLeader entities.
type ClassLeaderSelect struct {
	*ClassLeaderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cls *ClassLeaderSelect) Aggregate(fns ...AggregateFunc) *ClassLeaderSelect {
	cls.fns = append(cls.fns, fns...)
	return cls
}

// Scan applies the selector query and scans the result into the given value.
func (cls *ClassLeaderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cls.ctx, "Select")
	if err := cls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassLeaderQuery, *ClassLeaderSelect](ctx, cls.ClassLeaderQuery, cls, cls.inters, v)
}

func (cls *ClassLeaderSelect) sqlScan(ctx context.Context, root *ClassLeaderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cls.fns))
	for _, fn := range cls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
