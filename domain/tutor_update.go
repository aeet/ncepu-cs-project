// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
	"github.com/devcui/ncepu-cs-project/domain/tutor"
)

// TutorUpdate is the builder for updating Tutor entities.
type TutorUpdate struct {
	config
	hooks    []Hook
	mutation *TutorMutation
}

// Where appends a list predicates to the TutorUpdate builder.
func (tu *TutorUpdate) Where(ps ...predicate.Tutor) *TutorUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (tu *TutorUpdate) SetClassID(id int) *TutorUpdate {
	tu.mutation.SetClassID(id)
	return tu
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (tu *TutorUpdate) SetNillableClassID(id *int) *TutorUpdate {
	if id != nil {
		tu = tu.SetClassID(*id)
	}
	return tu
}

// SetClass sets the "class" edge to the Class entity.
func (tu *TutorUpdate) SetClass(c *Class) *TutorUpdate {
	return tu.SetClassID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (tu *TutorUpdate) SetStudentID(id int) *TutorUpdate {
	tu.mutation.SetStudentID(id)
	return tu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (tu *TutorUpdate) SetNillableStudentID(id *int) *TutorUpdate {
	if id != nil {
		tu = tu.SetStudentID(*id)
	}
	return tu
}

// SetStudent sets the "student" edge to the Student entity.
func (tu *TutorUpdate) SetStudent(s *Student) *TutorUpdate {
	return tu.SetStudentID(s.ID)
}

// Mutation returns the TutorMutation object of the builder.
func (tu *TutorUpdate) Mutation() *TutorMutation {
	return tu.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (tu *TutorUpdate) ClearClass() *TutorUpdate {
	tu.mutation.ClearClass()
	return tu
}

// ClearStudent clears the "student" edge to the Student entity.
func (tu *TutorUpdate) ClearStudent() *TutorUpdate {
	tu.mutation.ClearStudent()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TutorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TutorMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TutorUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TutorUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TutorUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TutorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tutor.Table, tutor.Columns, sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.ClassTable,
			Columns: []string{tutor.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.ClassTable,
			Columns: []string{tutor.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.StudentTable,
			Columns: []string{tutor.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.StudentTable,
			Columns: []string{tutor.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tutor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TutorUpdateOne is the builder for updating a single Tutor entity.
type TutorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TutorMutation
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (tuo *TutorUpdateOne) SetClassID(id int) *TutorUpdateOne {
	tuo.mutation.SetClassID(id)
	return tuo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (tuo *TutorUpdateOne) SetNillableClassID(id *int) *TutorUpdateOne {
	if id != nil {
		tuo = tuo.SetClassID(*id)
	}
	return tuo
}

// SetClass sets the "class" edge to the Class entity.
func (tuo *TutorUpdateOne) SetClass(c *Class) *TutorUpdateOne {
	return tuo.SetClassID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (tuo *TutorUpdateOne) SetStudentID(id int) *TutorUpdateOne {
	tuo.mutation.SetStudentID(id)
	return tuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (tuo *TutorUpdateOne) SetNillableStudentID(id *int) *TutorUpdateOne {
	if id != nil {
		tuo = tuo.SetStudentID(*id)
	}
	return tuo
}

// SetStudent sets the "student" edge to the Student entity.
func (tuo *TutorUpdateOne) SetStudent(s *Student) *TutorUpdateOne {
	return tuo.SetStudentID(s.ID)
}

// Mutation returns the TutorMutation object of the builder.
func (tuo *TutorUpdateOne) Mutation() *TutorMutation {
	return tuo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (tuo *TutorUpdateOne) ClearClass() *TutorUpdateOne {
	tuo.mutation.ClearClass()
	return tuo
}

// ClearStudent clears the "student" edge to the Student entity.
func (tuo *TutorUpdateOne) ClearStudent() *TutorUpdateOne {
	tuo.mutation.ClearStudent()
	return tuo
}

// Where appends a list predicates to the TutorUpdate builder.
func (tuo *TutorUpdateOne) Where(ps ...predicate.Tutor) *TutorUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TutorUpdateOne) Select(field string, fields ...string) *TutorUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tutor entity.
func (tuo *TutorUpdateOne) Save(ctx context.Context) (*Tutor, error) {
	return withHooks[*Tutor, TutorMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TutorUpdateOne) SaveX(ctx context.Context) *Tutor {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TutorUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TutorUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TutorUpdateOne) sqlSave(ctx context.Context) (_node *Tutor, err error) {
	_spec := sqlgraph.NewUpdateSpec(tutor.Table, tutor.Columns, sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "Tutor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tutor.FieldID)
		for _, f := range fields {
			if !tutor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != tutor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.ClassTable,
			Columns: []string{tutor.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.ClassTable,
			Columns: []string{tutor.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.StudentTable,
			Columns: []string{tutor.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tutor.StudentTable,
			Columns: []string{tutor.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tutor{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tutor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
