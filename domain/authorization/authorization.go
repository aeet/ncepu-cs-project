// Code generated by ent, DO NOT EDIT.

package authorization

const (
	// Label holds the string label denoting the authorization type in the database.
	Label = "authorization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldClientName holds the string denoting the client_name field in the database.
	FieldClientName = "client_name"
	// FieldGrantType holds the string denoting the grant_type field in the database.
	FieldGrantType = "grant_type"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldRedirectURL holds the string denoting the redirect_url field in the database.
	FieldRedirectURL = "redirect_url"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// EdgeResource holds the string denoting the resource edge name in mutations.
	EdgeResource = "resource"
	// Table holds the table name of the authorization in the database.
	Table = "authorizations"
	// ResourceTable is the table that holds the resource relation/edge. The primary key declared below.
	ResourceTable = "authorization_resource"
	// ResourceInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	ResourceInverseTable = "resources"
)

// Columns holds all SQL columns for authorization fields.
var Columns = []string{
	FieldID,
	FieldClientID,
	FieldClientSecret,
	FieldClientName,
	FieldGrantType,
	FieldScope,
	FieldRedirectURL,
	FieldDomain,
}

var (
	// ResourcePrimaryKey and ResourceColumn2 are the table columns denoting the
	// primary key for the resource relation (M2M).
	ResourcePrimaryKey = []string{"authorization_id", "resource_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	ClientSecretValidator func(string) error
	// ClientNameValidator is a validator for the "client_name" field. It is called by the builders before save.
	ClientNameValidator func(string) error
)
