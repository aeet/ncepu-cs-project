// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/campus"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
	"github.com/devcui/ncepu-cs-project/domain/majordirection"
	"github.com/devcui/ncepu-cs-project/domain/student"
	"github.com/devcui/ncepu-cs-project/domain/tutor"
)

// ClassCreate is the builder for creating a Class entity.
type ClassCreate struct {
	config
	mutation *ClassMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ClassCreate) SetName(s string) *ClassCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *ClassCreate) SetCode(s string) *ClassCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ClassCreate) SetDescription(s string) *ClassCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetType sets the "type" field.
func (cc *ClassCreate) SetType(s string) *ClassCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetMajorID sets the "major" edge to the Major entity by ID.
func (cc *ClassCreate) SetMajorID(id int) *ClassCreate {
	cc.mutation.SetMajorID(id)
	return cc
}

// SetNillableMajorID sets the "major" edge to the Major entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableMajorID(id *int) *ClassCreate {
	if id != nil {
		cc = cc.SetMajorID(*id)
	}
	return cc
}

// SetMajor sets the "major" edge to the Major entity.
func (cc *ClassCreate) SetMajor(m *Major) *ClassCreate {
	return cc.SetMajorID(m.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (cc *ClassCreate) SetDepartmentID(id int) *ClassCreate {
	cc.mutation.SetDepartmentID(id)
	return cc
}

// SetNillableDepartmentID sets the "department" edge to the Department entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableDepartmentID(id *int) *ClassCreate {
	if id != nil {
		cc = cc.SetDepartmentID(*id)
	}
	return cc
}

// SetDepartment sets the "department" edge to the Department entity.
func (cc *ClassCreate) SetDepartment(d *Department) *ClassCreate {
	return cc.SetDepartmentID(d.ID)
}

// SetCampusID sets the "campus" edge to the Campus entity by ID.
func (cc *ClassCreate) SetCampusID(id int) *ClassCreate {
	cc.mutation.SetCampusID(id)
	return cc
}

// SetNillableCampusID sets the "campus" edge to the Campus entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableCampusID(id *int) *ClassCreate {
	if id != nil {
		cc = cc.SetCampusID(*id)
	}
	return cc
}

// SetCampus sets the "campus" edge to the Campus entity.
func (cc *ClassCreate) SetCampus(c *Campus) *ClassCreate {
	return cc.SetCampusID(c.ID)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (cc *ClassCreate) AddStudentIDs(ids ...int) *ClassCreate {
	cc.mutation.AddStudentIDs(ids...)
	return cc
}

// AddStudent adds the "student" edges to the Student entity.
func (cc *ClassCreate) AddStudent(s ...*Student) *ClassCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddStudentIDs(ids...)
}

// SetClassLeaderID sets the "class_leader" edge to the ClassLeader entity by ID.
func (cc *ClassCreate) SetClassLeaderID(id int) *ClassCreate {
	cc.mutation.SetClassLeaderID(id)
	return cc
}

// SetNillableClassLeaderID sets the "class_leader" edge to the ClassLeader entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableClassLeaderID(id *int) *ClassCreate {
	if id != nil {
		cc = cc.SetClassLeaderID(*id)
	}
	return cc
}

// SetClassLeader sets the "class_leader" edge to the ClassLeader entity.
func (cc *ClassCreate) SetClassLeader(c *ClassLeader) *ClassCreate {
	return cc.SetClassLeaderID(c.ID)
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (cc *ClassCreate) SetTutorID(id int) *ClassCreate {
	cc.mutation.SetTutorID(id)
	return cc
}

// SetNillableTutorID sets the "tutor" edge to the Tutor entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableTutorID(id *int) *ClassCreate {
	if id != nil {
		cc = cc.SetTutorID(*id)
	}
	return cc
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (cc *ClassCreate) SetTutor(t *Tutor) *ClassCreate {
	return cc.SetTutorID(t.ID)
}

// SetMajorDirectionID sets the "major_direction" edge to the MajorDirection entity by ID.
func (cc *ClassCreate) SetMajorDirectionID(id int) *ClassCreate {
	cc.mutation.SetMajorDirectionID(id)
	return cc
}

// SetNillableMajorDirectionID sets the "major_direction" edge to the MajorDirection entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableMajorDirectionID(id *int) *ClassCreate {
	if id != nil {
		cc = cc.SetMajorDirectionID(*id)
	}
	return cc
}

// SetMajorDirection sets the "major_direction" edge to the MajorDirection entity.
func (cc *ClassCreate) SetMajorDirection(m *MajorDirection) *ClassCreate {
	return cc.SetMajorDirectionID(m.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cc *ClassCreate) Mutation() *ClassMutation {
	return cc.mutation
}

// Save creates the Class in the database.
func (cc *ClassCreate) Save(ctx context.Context) (*Class, error) {
	return withHooks[*Class, ClassMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClassCreate) SaveX(ctx context.Context) *Class {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClassCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClassCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClassCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`domain: missing required field "Class.name"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`domain: missing required field "Class.code"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`domain: missing required field "Class.description"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`domain: missing required field "Class.type"`)}
	}
	return nil
}

func (cc *ClassCreate) sqlSave(ctx context.Context) (*Class, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClassCreate) createSpec() (*Class, *sqlgraph.CreateSpec) {
	var (
		_node = &Class{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(class.Table, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(class.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(class.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(class.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := cc.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.MajorTable,
			Columns: []string{class.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_major = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.DepartmentTable,
			Columns: []string{class.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_department = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CampusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.CampusTable,
			Columns: []string{class.CampusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.campus_class = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClassLeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.ClassLeaderTable,
			Columns: []string{class.ClassLeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_leader_class = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.TutorTable,
			Columns: []string{class.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tutor_class = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MajorDirectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.MajorDirectionTable,
			Columns: []string{class.MajorDirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.major_direction_class = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassCreateBulk is the builder for creating many Class entities in bulk.
type ClassCreateBulk struct {
	config
	builders []*ClassCreate
}

// Save creates the Class entities in the database.
func (ccb *ClassCreateBulk) Save(ctx context.Context) ([]*Class, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Class, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClassCreateBulk) SaveX(ctx context.Context) []*Class {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClassCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClassCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
