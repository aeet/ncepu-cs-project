// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/authorization"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/resource"
)

// AuthorizationUpdate is the builder for updating Authorization entities.
type AuthorizationUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationMutation
}

// Where appends a list predicates to the AuthorizationUpdate builder.
func (au *AuthorizationUpdate) Where(ps ...predicate.Authorization) *AuthorizationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetClientID sets the "client_id" field.
func (au *AuthorizationUpdate) SetClientID(s string) *AuthorizationUpdate {
	au.mutation.SetClientID(s)
	return au
}

// SetClientSecret sets the "client_secret" field.
func (au *AuthorizationUpdate) SetClientSecret(s string) *AuthorizationUpdate {
	au.mutation.SetClientSecret(s)
	return au
}

// SetClientName sets the "client_name" field.
func (au *AuthorizationUpdate) SetClientName(s string) *AuthorizationUpdate {
	au.mutation.SetClientName(s)
	return au
}

// SetGrantType sets the "grant_type" field.
func (au *AuthorizationUpdate) SetGrantType(s []string) *AuthorizationUpdate {
	au.mutation.SetGrantType(s)
	return au
}

// AppendGrantType appends s to the "grant_type" field.
func (au *AuthorizationUpdate) AppendGrantType(s []string) *AuthorizationUpdate {
	au.mutation.AppendGrantType(s)
	return au
}

// SetScope sets the "scope" field.
func (au *AuthorizationUpdate) SetScope(s []string) *AuthorizationUpdate {
	au.mutation.SetScope(s)
	return au
}

// AppendScope appends s to the "scope" field.
func (au *AuthorizationUpdate) AppendScope(s []string) *AuthorizationUpdate {
	au.mutation.AppendScope(s)
	return au
}

// SetRedirectURL sets the "redirect_url" field.
func (au *AuthorizationUpdate) SetRedirectURL(s string) *AuthorizationUpdate {
	au.mutation.SetRedirectURL(s)
	return au
}

// SetDomain sets the "domain" field.
func (au *AuthorizationUpdate) SetDomain(s string) *AuthorizationUpdate {
	au.mutation.SetDomain(s)
	return au
}

// AddResourceIDs adds the "resource" edge to the Resource entity by IDs.
func (au *AuthorizationUpdate) AddResourceIDs(ids ...int) *AuthorizationUpdate {
	au.mutation.AddResourceIDs(ids...)
	return au
}

// AddResource adds the "resource" edges to the Resource entity.
func (au *AuthorizationUpdate) AddResource(r ...*Resource) *AuthorizationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddResourceIDs(ids...)
}

// Mutation returns the AuthorizationMutation object of the builder.
func (au *AuthorizationUpdate) Mutation() *AuthorizationMutation {
	return au.mutation
}

// ClearResource clears all "resource" edges to the Resource entity.
func (au *AuthorizationUpdate) ClearResource() *AuthorizationUpdate {
	au.mutation.ClearResource()
	return au
}

// RemoveResourceIDs removes the "resource" edge to Resource entities by IDs.
func (au *AuthorizationUpdate) RemoveResourceIDs(ids ...int) *AuthorizationUpdate {
	au.mutation.RemoveResourceIDs(ids...)
	return au
}

// RemoveResource removes "resource" edges to Resource entities.
func (au *AuthorizationUpdate) RemoveResource(r ...*Resource) *AuthorizationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveResourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthorizationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AuthorizationMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthorizationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthorizationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthorizationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuthorizationUpdate) check() error {
	if v, ok := au.mutation.ClientID(); ok {
		if err := authorization.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.ClientSecret(); ok {
		if err := authorization.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_secret": %w`, err)}
		}
	}
	if v, ok := au.mutation.ClientName(); ok {
		if err := authorization.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_name": %w`, err)}
		}
	}
	return nil
}

func (au *AuthorizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorization.Table, authorization.Columns, sqlgraph.NewFieldSpec(authorization.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ClientID(); ok {
		_spec.SetField(authorization.FieldClientID, field.TypeString, value)
	}
	if value, ok := au.mutation.ClientSecret(); ok {
		_spec.SetField(authorization.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := au.mutation.ClientName(); ok {
		_spec.SetField(authorization.FieldClientName, field.TypeString, value)
	}
	if value, ok := au.mutation.GrantType(); ok {
		_spec.SetField(authorization.FieldGrantType, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedGrantType(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authorization.FieldGrantType, value)
		})
	}
	if value, ok := au.mutation.Scope(); ok {
		_spec.SetField(authorization.FieldScope, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authorization.FieldScope, value)
		})
	}
	if value, ok := au.mutation.RedirectURL(); ok {
		_spec.SetField(authorization.FieldRedirectURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Domain(); ok {
		_spec.SetField(authorization.FieldDomain, field.TypeString, value)
	}
	if au.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedResourceIDs(); len(nodes) > 0 && !au.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthorizationUpdateOne is the builder for updating a single Authorization entity.
type AuthorizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationMutation
}

// SetClientID sets the "client_id" field.
func (auo *AuthorizationUpdateOne) SetClientID(s string) *AuthorizationUpdateOne {
	auo.mutation.SetClientID(s)
	return auo
}

// SetClientSecret sets the "client_secret" field.
func (auo *AuthorizationUpdateOne) SetClientSecret(s string) *AuthorizationUpdateOne {
	auo.mutation.SetClientSecret(s)
	return auo
}

// SetClientName sets the "client_name" field.
func (auo *AuthorizationUpdateOne) SetClientName(s string) *AuthorizationUpdateOne {
	auo.mutation.SetClientName(s)
	return auo
}

// SetGrantType sets the "grant_type" field.
func (auo *AuthorizationUpdateOne) SetGrantType(s []string) *AuthorizationUpdateOne {
	auo.mutation.SetGrantType(s)
	return auo
}

// AppendGrantType appends s to the "grant_type" field.
func (auo *AuthorizationUpdateOne) AppendGrantType(s []string) *AuthorizationUpdateOne {
	auo.mutation.AppendGrantType(s)
	return auo
}

// SetScope sets the "scope" field.
func (auo *AuthorizationUpdateOne) SetScope(s []string) *AuthorizationUpdateOne {
	auo.mutation.SetScope(s)
	return auo
}

// AppendScope appends s to the "scope" field.
func (auo *AuthorizationUpdateOne) AppendScope(s []string) *AuthorizationUpdateOne {
	auo.mutation.AppendScope(s)
	return auo
}

// SetRedirectURL sets the "redirect_url" field.
func (auo *AuthorizationUpdateOne) SetRedirectURL(s string) *AuthorizationUpdateOne {
	auo.mutation.SetRedirectURL(s)
	return auo
}

// SetDomain sets the "domain" field.
func (auo *AuthorizationUpdateOne) SetDomain(s string) *AuthorizationUpdateOne {
	auo.mutation.SetDomain(s)
	return auo
}

// AddResourceIDs adds the "resource" edge to the Resource entity by IDs.
func (auo *AuthorizationUpdateOne) AddResourceIDs(ids ...int) *AuthorizationUpdateOne {
	auo.mutation.AddResourceIDs(ids...)
	return auo
}

// AddResource adds the "resource" edges to the Resource entity.
func (auo *AuthorizationUpdateOne) AddResource(r ...*Resource) *AuthorizationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddResourceIDs(ids...)
}

// Mutation returns the AuthorizationMutation object of the builder.
func (auo *AuthorizationUpdateOne) Mutation() *AuthorizationMutation {
	return auo.mutation
}

// ClearResource clears all "resource" edges to the Resource entity.
func (auo *AuthorizationUpdateOne) ClearResource() *AuthorizationUpdateOne {
	auo.mutation.ClearResource()
	return auo
}

// RemoveResourceIDs removes the "resource" edge to Resource entities by IDs.
func (auo *AuthorizationUpdateOne) RemoveResourceIDs(ids ...int) *AuthorizationUpdateOne {
	auo.mutation.RemoveResourceIDs(ids...)
	return auo
}

// RemoveResource removes "resource" edges to Resource entities.
func (auo *AuthorizationUpdateOne) RemoveResource(r ...*Resource) *AuthorizationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveResourceIDs(ids...)
}

// Where appends a list predicates to the AuthorizationUpdate builder.
func (auo *AuthorizationUpdateOne) Where(ps ...predicate.Authorization) *AuthorizationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthorizationUpdateOne) Select(field string, fields ...string) *AuthorizationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Authorization entity.
func (auo *AuthorizationUpdateOne) Save(ctx context.Context) (*Authorization, error) {
	return withHooks[*Authorization, AuthorizationMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthorizationUpdateOne) SaveX(ctx context.Context) *Authorization {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthorizationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthorizationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuthorizationUpdateOne) check() error {
	if v, ok := auo.mutation.ClientID(); ok {
		if err := authorization.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ClientSecret(); ok {
		if err := authorization.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_secret": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ClientName(); ok {
		if err := authorization.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_name": %w`, err)}
		}
	}
	return nil
}

func (auo *AuthorizationUpdateOne) sqlSave(ctx context.Context) (_node *Authorization, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorization.Table, authorization.Columns, sqlgraph.NewFieldSpec(authorization.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "Authorization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorization.FieldID)
		for _, f := range fields {
			if !authorization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != authorization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ClientID(); ok {
		_spec.SetField(authorization.FieldClientID, field.TypeString, value)
	}
	if value, ok := auo.mutation.ClientSecret(); ok {
		_spec.SetField(authorization.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := auo.mutation.ClientName(); ok {
		_spec.SetField(authorization.FieldClientName, field.TypeString, value)
	}
	if value, ok := auo.mutation.GrantType(); ok {
		_spec.SetField(authorization.FieldGrantType, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedGrantType(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authorization.FieldGrantType, value)
		})
	}
	if value, ok := auo.mutation.Scope(); ok {
		_spec.SetField(authorization.FieldScope, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authorization.FieldScope, value)
		})
	}
	if value, ok := auo.mutation.RedirectURL(); ok {
		_spec.SetField(authorization.FieldRedirectURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Domain(); ok {
		_spec.SetField(authorization.FieldDomain, field.TypeString, value)
	}
	if auo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedResourceIDs(); len(nodes) > 0 && !auo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Authorization{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
