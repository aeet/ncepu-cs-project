// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
	"github.com/devcui/ncepu-cs-project/domain/student"
	"github.com/devcui/ncepu-cs-project/domain/tutor"
	"github.com/devcui/ncepu-cs-project/domain/user"
)

// Student is the model entity for the Student schema.
type Student struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 年龄
	Age int `json:"age,omitempty"`
	// 性别
	Sex string `json:"sex,omitempty"`
	// 学号
	Code string `json:"code,omitempty"`
	// 头像
	Avatar []byte `json:"avatar,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudentQuery when eager-loading is set.
	Edges                StudentEdges `json:"edges"`
	class_leader_student *int
	student_department   *int
	student_major        *int
	student_class        *int
	tutor_student        *int
}

// StudentEdges holds the relations/edges for other nodes in the graph.
type StudentEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Major holds the value of the major edge.
	Major *Major `json:"major,omitempty"`
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// ClassLeader holds the value of the class_leader edge.
	ClassLeader *ClassLeader `json:"class_leader,omitempty"`
	// Tutor holds the value of the tutor edge.
	Tutor *Tutor `json:"tutor,omitempty"`
	// Certificate holds the value of the certificate edge.
	Certificate []*Certificate `json:"certificate,omitempty"`
	// EducationLevel holds the value of the education_level edge.
	EducationLevel []*EducationLevel `json:"education_level,omitempty"`
	// EnrollmentStatus holds the value of the enrollment_status edge.
	EnrollmentStatus []*EnrollmentStatus `json:"enrollment_status,omitempty"`
	// FamilyInfo holds the value of the family_info edge.
	FamilyInfo []*FamilyInfo `json:"family_info,omitempty"`
	// PracticalExperience holds the value of the practical_experience edge.
	PracticalExperience []*PracticalExperience `json:"practical_experience,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Department == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// MajorOrErr returns the Major value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) MajorOrErr() (*Major, error) {
	if e.loadedTypes[2] {
		if e.Major == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: major.Label}
		}
		return e.Major, nil
	}
	return nil, &NotLoadedError{edge: "major"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[3] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// ClassLeaderOrErr returns the ClassLeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) ClassLeaderOrErr() (*ClassLeader, error) {
	if e.loadedTypes[4] {
		if e.ClassLeader == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: classleader.Label}
		}
		return e.ClassLeader, nil
	}
	return nil, &NotLoadedError{edge: "class_leader"}
}

// TutorOrErr returns the Tutor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) TutorOrErr() (*Tutor, error) {
	if e.loadedTypes[5] {
		if e.Tutor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tutor.Label}
		}
		return e.Tutor, nil
	}
	return nil, &NotLoadedError{edge: "tutor"}
}

// CertificateOrErr returns the Certificate value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) CertificateOrErr() ([]*Certificate, error) {
	if e.loadedTypes[6] {
		return e.Certificate, nil
	}
	return nil, &NotLoadedError{edge: "certificate"}
}

// EducationLevelOrErr returns the EducationLevel value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) EducationLevelOrErr() ([]*EducationLevel, error) {
	if e.loadedTypes[7] {
		return e.EducationLevel, nil
	}
	return nil, &NotLoadedError{edge: "education_level"}
}

// EnrollmentStatusOrErr returns the EnrollmentStatus value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) EnrollmentStatusOrErr() ([]*EnrollmentStatus, error) {
	if e.loadedTypes[8] {
		return e.EnrollmentStatus, nil
	}
	return nil, &NotLoadedError{edge: "enrollment_status"}
}

// FamilyInfoOrErr returns the FamilyInfo value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) FamilyInfoOrErr() ([]*FamilyInfo, error) {
	if e.loadedTypes[9] {
		return e.FamilyInfo, nil
	}
	return nil, &NotLoadedError{edge: "family_info"}
}

// PracticalExperienceOrErr returns the PracticalExperience value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) PracticalExperienceOrErr() ([]*PracticalExperience, error) {
	if e.loadedTypes[10] {
		return e.PracticalExperience, nil
	}
	return nil, &NotLoadedError{edge: "practical_experience"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Student) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case student.FieldAvatar:
			values[i] = new([]byte)
		case student.FieldID, student.FieldAge:
			values[i] = new(sql.NullInt64)
		case student.FieldName, student.FieldSex, student.FieldCode:
			values[i] = new(sql.NullString)
		case student.ForeignKeys[0]: // class_leader_student
			values[i] = new(sql.NullInt64)
		case student.ForeignKeys[1]: // student_department
			values[i] = new(sql.NullInt64)
		case student.ForeignKeys[2]: // student_major
			values[i] = new(sql.NullInt64)
		case student.ForeignKeys[3]: // student_class
			values[i] = new(sql.NullInt64)
		case student.ForeignKeys[4]: // tutor_student
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Student", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Student fields.
func (s *Student) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case student.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case student.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case student.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				s.Age = int(value.Int64)
			}
		case student.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				s.Sex = value.String
			}
		case student.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				s.Code = value.String
			}
		case student.FieldAvatar:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value != nil {
				s.Avatar = *value
			}
		case student.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_leader_student", value)
			} else if value.Valid {
				s.class_leader_student = new(int)
				*s.class_leader_student = int(value.Int64)
			}
		case student.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field student_department", value)
			} else if value.Valid {
				s.student_department = new(int)
				*s.student_department = int(value.Int64)
			}
		case student.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field student_major", value)
			} else if value.Valid {
				s.student_major = new(int)
				*s.student_major = int(value.Int64)
			}
		case student.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field student_class", value)
			} else if value.Valid {
				s.student_class = new(int)
				*s.student_class = int(value.Int64)
			}
		case student.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tutor_student", value)
			} else if value.Valid {
				s.tutor_student = new(int)
				*s.tutor_student = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Student entity.
func (s *Student) QueryUser() *UserQuery {
	return NewStudentClient(s.config).QueryUser(s)
}

// QueryDepartment queries the "department" edge of the Student entity.
func (s *Student) QueryDepartment() *DepartmentQuery {
	return NewStudentClient(s.config).QueryDepartment(s)
}

// QueryMajor queries the "major" edge of the Student entity.
func (s *Student) QueryMajor() *MajorQuery {
	return NewStudentClient(s.config).QueryMajor(s)
}

// QueryClass queries the "class" edge of the Student entity.
func (s *Student) QueryClass() *ClassQuery {
	return NewStudentClient(s.config).QueryClass(s)
}

// QueryClassLeader queries the "class_leader" edge of the Student entity.
func (s *Student) QueryClassLeader() *ClassLeaderQuery {
	return NewStudentClient(s.config).QueryClassLeader(s)
}

// QueryTutor queries the "tutor" edge of the Student entity.
func (s *Student) QueryTutor() *TutorQuery {
	return NewStudentClient(s.config).QueryTutor(s)
}

// QueryCertificate queries the "certificate" edge of the Student entity.
func (s *Student) QueryCertificate() *CertificateQuery {
	return NewStudentClient(s.config).QueryCertificate(s)
}

// QueryEducationLevel queries the "education_level" edge of the Student entity.
func (s *Student) QueryEducationLevel() *EducationLevelQuery {
	return NewStudentClient(s.config).QueryEducationLevel(s)
}

// QueryEnrollmentStatus queries the "enrollment_status" edge of the Student entity.
func (s *Student) QueryEnrollmentStatus() *EnrollmentStatusQuery {
	return NewStudentClient(s.config).QueryEnrollmentStatus(s)
}

// QueryFamilyInfo queries the "family_info" edge of the Student entity.
func (s *Student) QueryFamilyInfo() *FamilyInfoQuery {
	return NewStudentClient(s.config).QueryFamilyInfo(s)
}

// QueryPracticalExperience queries the "practical_experience" edge of the Student entity.
func (s *Student) QueryPracticalExperience() *PracticalExperienceQuery {
	return NewStudentClient(s.config).QueryPracticalExperience(s)
}

// Update returns a builder for updating this Student.
// Note that you need to call Student.Unwrap() before calling this method if this Student
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Student) Update() *StudentUpdateOne {
	return NewStudentClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Student entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Student) Unwrap() *Student {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("domain: Student is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Student) String() string {
	var builder strings.Builder
	builder.WriteString("Student(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", s.Age))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(s.Sex)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(s.Code)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(fmt.Sprintf("%v", s.Avatar))
	builder.WriteByte(')')
	return builder.String()
}

// Students is a parsable slice of Student.
type Students []*Student
