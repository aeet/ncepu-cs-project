// Code generated by ent, DO NOT EDIT.

package class

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeMajor holds the string denoting the major edge name in mutations.
	EdgeMajor = "major"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeCampus holds the string denoting the campus edge name in mutations.
	EdgeCampus = "campus"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeClassLeader holds the string denoting the class_leader edge name in mutations.
	EdgeClassLeader = "class_leader"
	// EdgeTutor holds the string denoting the tutor edge name in mutations.
	EdgeTutor = "tutor"
	// EdgeMajorDirection holds the string denoting the major_direction edge name in mutations.
	EdgeMajorDirection = "major_direction"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// MajorTable is the table that holds the major relation/edge.
	MajorTable = "classes"
	// MajorInverseTable is the table name for the Major entity.
	// It exists in this package in order to avoid circular dependency with the "major" package.
	MajorInverseTable = "majors"
	// MajorColumn is the table column denoting the major relation/edge.
	MajorColumn = "class_major"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "classes"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "class_department"
	// CampusTable is the table that holds the campus relation/edge.
	CampusTable = "classes"
	// CampusInverseTable is the table name for the Campus entity.
	// It exists in this package in order to avoid circular dependency with the "campus" package.
	CampusInverseTable = "campus"
	// CampusColumn is the table column denoting the campus relation/edge.
	CampusColumn = "campus_class"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "students"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_class"
	// ClassLeaderTable is the table that holds the class_leader relation/edge.
	ClassLeaderTable = "classes"
	// ClassLeaderInverseTable is the table name for the ClassLeader entity.
	// It exists in this package in order to avoid circular dependency with the "classleader" package.
	ClassLeaderInverseTable = "class_leaders"
	// ClassLeaderColumn is the table column denoting the class_leader relation/edge.
	ClassLeaderColumn = "class_leader_class"
	// TutorTable is the table that holds the tutor relation/edge.
	TutorTable = "classes"
	// TutorInverseTable is the table name for the Tutor entity.
	// It exists in this package in order to avoid circular dependency with the "tutor" package.
	TutorInverseTable = "tutors"
	// TutorColumn is the table column denoting the tutor relation/edge.
	TutorColumn = "tutor_class"
	// MajorDirectionTable is the table that holds the major_direction relation/edge.
	MajorDirectionTable = "classes"
	// MajorDirectionInverseTable is the table name for the MajorDirection entity.
	// It exists in this package in order to avoid circular dependency with the "majordirection" package.
	MajorDirectionInverseTable = "major_directions"
	// MajorDirectionColumn is the table column denoting the major_direction relation/edge.
	MajorDirectionColumn = "major_direction_class"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "classes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"campus_class",
	"class_major",
	"class_department",
	"class_leader_class",
	"major_direction_class",
	"tutor_class",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
