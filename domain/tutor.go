// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/student"
	"github.com/devcui/ncepu-cs-project/domain/tutor"
)

// Tutor is the model entity for the Tutor schema.
type Tutor struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TutorQuery when eager-loading is set.
	Edges TutorEdges `json:"edges"`
}

// TutorEdges holds the relations/edges for other nodes in the graph.
type TutorEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TutorEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TutorEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[1] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tutor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tutor.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tutor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tutor fields.
func (t *Tutor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tutor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryClass queries the "class" edge of the Tutor entity.
func (t *Tutor) QueryClass() *ClassQuery {
	return NewTutorClient(t.config).QueryClass(t)
}

// QueryStudent queries the "student" edge of the Tutor entity.
func (t *Tutor) QueryStudent() *StudentQuery {
	return NewTutorClient(t.config).QueryStudent(t)
}

// Update returns a builder for updating this Tutor.
// Note that you need to call Tutor.Unwrap() before calling this method if this Tutor
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tutor) Update() *TutorUpdateOne {
	return NewTutorClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tutor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tutor) Unwrap() *Tutor {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("domain: Tutor is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tutor) String() string {
	var builder strings.Builder
	builder.WriteString("Tutor(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Tutors is a parsable slice of Tutor.
type Tutors []*Tutor
