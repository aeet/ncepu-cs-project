// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthorizationsColumns holds the columns for the "authorizations" table.
	AuthorizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "client_id", Type: field.TypeString, Unique: true},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "client_name", Type: field.TypeString, Unique: true},
		{Name: "grant_type", Type: field.TypeJSON},
		{Name: "scope", Type: field.TypeJSON},
		{Name: "redirect_url", Type: field.TypeString},
		{Name: "domain", Type: field.TypeString},
	}
	// AuthorizationsTable holds the schema information for the "authorizations" table.
	AuthorizationsTable = &schema.Table{
		Name:       "authorizations",
		Columns:    AuthorizationsColumns,
		PrimaryKey: []*schema.Column{AuthorizationsColumns[0]},
	}
	// ResourcesColumns holds the columns for the "resources" table.
	ResourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "resource_name", Type: field.TypeString},
		{Name: "resource_value", Type: field.TypeString},
	}
	// ResourcesTable holds the schema information for the "resources" table.
	ResourcesTable = &schema.Table{
		Name:       "resources",
		Columns:    ResourcesColumns,
		PrimaryKey: []*schema.Column{ResourcesColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role_name", Type: field.TypeString, Unique: true},
		{Name: "role_value", Type: field.TypeString},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// StudentsColumns holds the columns for the "students" table.
	StudentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_student", Type: field.TypeInt, Unique: true},
	}
	// StudentsTable holds the schema information for the "students" table.
	StudentsTable = &schema.Table{
		Name:       "students",
		Columns:    StudentsColumns,
		PrimaryKey: []*schema.Column{StudentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "students_users_student",
				Columns:    []*schema.Column{StudentsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "account", Type: field.TypeString},
		{Name: "passwd", Type: field.TypeString},
		{Name: "username", Type: field.TypeString},
		{Name: "avatar", Type: field.TypeBytes},
		{Name: "email", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// AuthorizationResourceColumns holds the columns for the "authorization_resource" table.
	AuthorizationResourceColumns = []*schema.Column{
		{Name: "authorization_id", Type: field.TypeInt},
		{Name: "resource_id", Type: field.TypeInt},
	}
	// AuthorizationResourceTable holds the schema information for the "authorization_resource" table.
	AuthorizationResourceTable = &schema.Table{
		Name:       "authorization_resource",
		Columns:    AuthorizationResourceColumns,
		PrimaryKey: []*schema.Column{AuthorizationResourceColumns[0], AuthorizationResourceColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "authorization_resource_authorization_id",
				Columns:    []*schema.Column{AuthorizationResourceColumns[0]},
				RefColumns: []*schema.Column{AuthorizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "authorization_resource_resource_id",
				Columns:    []*schema.Column{AuthorizationResourceColumns[1]},
				RefColumns: []*schema.Column{ResourcesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoleResourceColumns holds the columns for the "role_resource" table.
	RoleResourceColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeInt},
		{Name: "resource_id", Type: field.TypeInt},
	}
	// RoleResourceTable holds the schema information for the "role_resource" table.
	RoleResourceTable = &schema.Table{
		Name:       "role_resource",
		Columns:    RoleResourceColumns,
		PrimaryKey: []*schema.Column{RoleResourceColumns[0], RoleResourceColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_resource_role_id",
				Columns:    []*schema.Column{RoleResourceColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_resource_resource_id",
				Columns:    []*schema.Column{RoleResourceColumns[1]},
				RefColumns: []*schema.Column{ResourcesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRoleColumns holds the columns for the "user_role" table.
	UserRoleColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "role_id", Type: field.TypeInt},
	}
	// UserRoleTable holds the schema information for the "user_role" table.
	UserRoleTable = &schema.Table{
		Name:       "user_role",
		Columns:    UserRoleColumns,
		PrimaryKey: []*schema.Column{UserRoleColumns[0], UserRoleColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_role_user_id",
				Columns:    []*schema.Column{UserRoleColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_role_role_id",
				Columns:    []*schema.Column{UserRoleColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserResourceColumns holds the columns for the "user_resource" table.
	UserResourceColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "resource_id", Type: field.TypeInt},
	}
	// UserResourceTable holds the schema information for the "user_resource" table.
	UserResourceTable = &schema.Table{
		Name:       "user_resource",
		Columns:    UserResourceColumns,
		PrimaryKey: []*schema.Column{UserResourceColumns[0], UserResourceColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_resource_user_id",
				Columns:    []*schema.Column{UserResourceColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_resource_resource_id",
				Columns:    []*schema.Column{UserResourceColumns[1]},
				RefColumns: []*schema.Column{ResourcesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthorizationsTable,
		ResourcesTable,
		RolesTable,
		StudentsTable,
		UsersTable,
		AuthorizationResourceTable,
		RoleResourceTable,
		UserRoleTable,
		UserResourceTable,
	}
)

func init() {
	StudentsTable.ForeignKeys[0].RefTable = UsersTable
	AuthorizationResourceTable.ForeignKeys[0].RefTable = AuthorizationsTable
	AuthorizationResourceTable.ForeignKeys[1].RefTable = ResourcesTable
	RoleResourceTable.ForeignKeys[0].RefTable = RolesTable
	RoleResourceTable.ForeignKeys[1].RefTable = ResourcesTable
	UserRoleTable.ForeignKeys[0].RefTable = UsersTable
	UserRoleTable.ForeignKeys[1].RefTable = RolesTable
	UserResourceTable.ForeignKeys[0].RefTable = UsersTable
	UserResourceTable.ForeignKeys[1].RefTable = ResourcesTable
}
