// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/authorization"
	"github.com/devcui/ncepu-cs-project/domain/resource"
)

// AuthorizationCreate is the builder for creating a Authorization entity.
type AuthorizationCreate struct {
	config
	mutation *AuthorizationMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (ac *AuthorizationCreate) SetClientID(s string) *AuthorizationCreate {
	ac.mutation.SetClientID(s)
	return ac
}

// SetClientSecret sets the "client_secret" field.
func (ac *AuthorizationCreate) SetClientSecret(s string) *AuthorizationCreate {
	ac.mutation.SetClientSecret(s)
	return ac
}

// SetClientName sets the "client_name" field.
func (ac *AuthorizationCreate) SetClientName(s string) *AuthorizationCreate {
	ac.mutation.SetClientName(s)
	return ac
}

// SetGrantType sets the "grant_type" field.
func (ac *AuthorizationCreate) SetGrantType(s []string) *AuthorizationCreate {
	ac.mutation.SetGrantType(s)
	return ac
}

// SetScope sets the "scope" field.
func (ac *AuthorizationCreate) SetScope(s []string) *AuthorizationCreate {
	ac.mutation.SetScope(s)
	return ac
}

// SetRedirectURL sets the "redirect_url" field.
func (ac *AuthorizationCreate) SetRedirectURL(s string) *AuthorizationCreate {
	ac.mutation.SetRedirectURL(s)
	return ac
}

// SetDomain sets the "domain" field.
func (ac *AuthorizationCreate) SetDomain(s string) *AuthorizationCreate {
	ac.mutation.SetDomain(s)
	return ac
}

// AddResourceIDs adds the "resource" edge to the Resource entity by IDs.
func (ac *AuthorizationCreate) AddResourceIDs(ids ...int) *AuthorizationCreate {
	ac.mutation.AddResourceIDs(ids...)
	return ac
}

// AddResource adds the "resource" edges to the Resource entity.
func (ac *AuthorizationCreate) AddResource(r ...*Resource) *AuthorizationCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddResourceIDs(ids...)
}

// Mutation returns the AuthorizationMutation object of the builder.
func (ac *AuthorizationCreate) Mutation() *AuthorizationMutation {
	return ac.mutation
}

// Save creates the Authorization in the database.
func (ac *AuthorizationCreate) Save(ctx context.Context) (*Authorization, error) {
	return withHooks[*Authorization, AuthorizationMutation](ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthorizationCreate) SaveX(ctx context.Context) *Authorization {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuthorizationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuthorizationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthorizationCreate) check() error {
	if _, ok := ac.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`domain: missing required field "Authorization.client_id"`)}
	}
	if v, ok := ac.mutation.ClientID(); ok {
		if err := authorization.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`domain: missing required field "Authorization.client_secret"`)}
	}
	if v, ok := ac.mutation.ClientSecret(); ok {
		if err := authorization.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_secret": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ClientName(); !ok {
		return &ValidationError{Name: "client_name", err: errors.New(`domain: missing required field "Authorization.client_name"`)}
	}
	if v, ok := ac.mutation.ClientName(); ok {
		if err := authorization.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`domain: validator failed for field "Authorization.client_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.GrantType(); !ok {
		return &ValidationError{Name: "grant_type", err: errors.New(`domain: missing required field "Authorization.grant_type"`)}
	}
	if _, ok := ac.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`domain: missing required field "Authorization.scope"`)}
	}
	if _, ok := ac.mutation.RedirectURL(); !ok {
		return &ValidationError{Name: "redirect_url", err: errors.New(`domain: missing required field "Authorization.redirect_url"`)}
	}
	if _, ok := ac.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`domain: missing required field "Authorization.domain"`)}
	}
	return nil
}

func (ac *AuthorizationCreate) sqlSave(ctx context.Context) (*Authorization, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AuthorizationCreate) createSpec() (*Authorization, *sqlgraph.CreateSpec) {
	var (
		_node = &Authorization{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(authorization.Table, sqlgraph.NewFieldSpec(authorization.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.ClientID(); ok {
		_spec.SetField(authorization.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := ac.mutation.ClientSecret(); ok {
		_spec.SetField(authorization.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := ac.mutation.ClientName(); ok {
		_spec.SetField(authorization.FieldClientName, field.TypeString, value)
		_node.ClientName = value
	}
	if value, ok := ac.mutation.GrantType(); ok {
		_spec.SetField(authorization.FieldGrantType, field.TypeJSON, value)
		_node.GrantType = value
	}
	if value, ok := ac.mutation.Scope(); ok {
		_spec.SetField(authorization.FieldScope, field.TypeJSON, value)
		_node.Scope = value
	}
	if value, ok := ac.mutation.RedirectURL(); ok {
		_spec.SetField(authorization.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	if value, ok := ac.mutation.Domain(); ok {
		_spec.SetField(authorization.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if nodes := ac.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authorization.ResourceTable,
			Columns: authorization.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthorizationCreateBulk is the builder for creating many Authorization entities in bulk.
type AuthorizationCreateBulk struct {
	config
	builders []*AuthorizationCreate
}

// Save creates the Authorization entities in the database.
func (acb *AuthorizationCreateBulk) Save(ctx context.Context) ([]*Authorization, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Authorization, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuthorizationCreateBulk) SaveX(ctx context.Context) []*Authorization {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuthorizationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuthorizationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
