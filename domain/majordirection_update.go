// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/majordirection"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
)

// MajorDirectionUpdate is the builder for updating MajorDirection entities.
type MajorDirectionUpdate struct {
	config
	hooks    []Hook
	mutation *MajorDirectionMutation
}

// Where appends a list predicates to the MajorDirectionUpdate builder.
func (mdu *MajorDirectionUpdate) Where(ps ...predicate.MajorDirection) *MajorDirectionUpdate {
	mdu.mutation.Where(ps...)
	return mdu
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mdu *MajorDirectionUpdate) SetClassID(id int) *MajorDirectionUpdate {
	mdu.mutation.SetClassID(id)
	return mdu
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (mdu *MajorDirectionUpdate) SetNillableClassID(id *int) *MajorDirectionUpdate {
	if id != nil {
		mdu = mdu.SetClassID(*id)
	}
	return mdu
}

// SetClass sets the "class" edge to the Class entity.
func (mdu *MajorDirectionUpdate) SetClass(c *Class) *MajorDirectionUpdate {
	return mdu.SetClassID(c.ID)
}

// Mutation returns the MajorDirectionMutation object of the builder.
func (mdu *MajorDirectionUpdate) Mutation() *MajorDirectionMutation {
	return mdu.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (mdu *MajorDirectionUpdate) ClearClass() *MajorDirectionUpdate {
	mdu.mutation.ClearClass()
	return mdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *MajorDirectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MajorDirectionMutation](ctx, mdu.sqlSave, mdu.mutation, mdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *MajorDirectionUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *MajorDirectionUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *MajorDirectionUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mdu *MajorDirectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(majordirection.Table, majordirection.Columns, sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt))
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mdu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   majordirection.ClassTable,
			Columns: []string{majordirection.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   majordirection.ClassTable,
			Columns: []string{majordirection.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{majordirection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mdu.mutation.done = true
	return n, nil
}

// MajorDirectionUpdateOne is the builder for updating a single MajorDirection entity.
type MajorDirectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MajorDirectionMutation
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mduo *MajorDirectionUpdateOne) SetClassID(id int) *MajorDirectionUpdateOne {
	mduo.mutation.SetClassID(id)
	return mduo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (mduo *MajorDirectionUpdateOne) SetNillableClassID(id *int) *MajorDirectionUpdateOne {
	if id != nil {
		mduo = mduo.SetClassID(*id)
	}
	return mduo
}

// SetClass sets the "class" edge to the Class entity.
func (mduo *MajorDirectionUpdateOne) SetClass(c *Class) *MajorDirectionUpdateOne {
	return mduo.SetClassID(c.ID)
}

// Mutation returns the MajorDirectionMutation object of the builder.
func (mduo *MajorDirectionUpdateOne) Mutation() *MajorDirectionMutation {
	return mduo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (mduo *MajorDirectionUpdateOne) ClearClass() *MajorDirectionUpdateOne {
	mduo.mutation.ClearClass()
	return mduo
}

// Where appends a list predicates to the MajorDirectionUpdate builder.
func (mduo *MajorDirectionUpdateOne) Where(ps ...predicate.MajorDirection) *MajorDirectionUpdateOne {
	mduo.mutation.Where(ps...)
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *MajorDirectionUpdateOne) Select(field string, fields ...string) *MajorDirectionUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated MajorDirection entity.
func (mduo *MajorDirectionUpdateOne) Save(ctx context.Context) (*MajorDirection, error) {
	return withHooks[*MajorDirection, MajorDirectionMutation](ctx, mduo.sqlSave, mduo.mutation, mduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *MajorDirectionUpdateOne) SaveX(ctx context.Context) *MajorDirection {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *MajorDirectionUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *MajorDirectionUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mduo *MajorDirectionUpdateOne) sqlSave(ctx context.Context) (_node *MajorDirection, err error) {
	_spec := sqlgraph.NewUpdateSpec(majordirection.Table, majordirection.Columns, sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt))
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "MajorDirection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, majordirection.FieldID)
		for _, f := range fields {
			if !majordirection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != majordirection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mduo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   majordirection.ClassTable,
			Columns: []string{majordirection.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   majordirection.ClassTable,
			Columns: []string{majordirection.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MajorDirection{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{majordirection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mduo.mutation.done = true
	return _node, nil
}
