// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// ClassLeaderCreate is the builder for creating a ClassLeader entity.
type ClassLeaderCreate struct {
	config
	mutation *ClassLeaderMutation
	hooks    []Hook
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (clc *ClassLeaderCreate) SetClassID(id int) *ClassLeaderCreate {
	clc.mutation.SetClassID(id)
	return clc
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (clc *ClassLeaderCreate) SetNillableClassID(id *int) *ClassLeaderCreate {
	if id != nil {
		clc = clc.SetClassID(*id)
	}
	return clc
}

// SetClass sets the "class" edge to the Class entity.
func (clc *ClassLeaderCreate) SetClass(c *Class) *ClassLeaderCreate {
	return clc.SetClassID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (clc *ClassLeaderCreate) SetStudentID(id int) *ClassLeaderCreate {
	clc.mutation.SetStudentID(id)
	return clc
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (clc *ClassLeaderCreate) SetNillableStudentID(id *int) *ClassLeaderCreate {
	if id != nil {
		clc = clc.SetStudentID(*id)
	}
	return clc
}

// SetStudent sets the "student" edge to the Student entity.
func (clc *ClassLeaderCreate) SetStudent(s *Student) *ClassLeaderCreate {
	return clc.SetStudentID(s.ID)
}

// Mutation returns the ClassLeaderMutation object of the builder.
func (clc *ClassLeaderCreate) Mutation() *ClassLeaderMutation {
	return clc.mutation
}

// Save creates the ClassLeader in the database.
func (clc *ClassLeaderCreate) Save(ctx context.Context) (*ClassLeader, error) {
	return withHooks[*ClassLeader, ClassLeaderMutation](ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *ClassLeaderCreate) SaveX(ctx context.Context) *ClassLeader {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *ClassLeaderCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *ClassLeaderCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *ClassLeaderCreate) check() error {
	return nil
}

func (clc *ClassLeaderCreate) sqlSave(ctx context.Context) (*ClassLeader, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *ClassLeaderCreate) createSpec() (*ClassLeader, *sqlgraph.CreateSpec) {
	var (
		_node = &ClassLeader{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(classleader.Table, sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt))
	)
	if nodes := clc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.ClassTable,
			Columns: []string{classleader.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.StudentTable,
			Columns: []string{classleader.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassLeaderCreateBulk is the builder for creating many ClassLeader entities in bulk.
type ClassLeaderCreateBulk struct {
	config
	builders []*ClassLeaderCreate
}

// Save creates the ClassLeader entities in the database.
func (clcb *ClassLeaderCreateBulk) Save(ctx context.Context) ([]*ClassLeader, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*ClassLeader, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassLeaderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *ClassLeaderCreateBulk) SaveX(ctx context.Context) []*ClassLeader {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *ClassLeaderCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *ClassLeaderCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
