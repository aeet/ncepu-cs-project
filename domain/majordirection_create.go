// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/majordirection"
)

// MajorDirectionCreate is the builder for creating a MajorDirection entity.
type MajorDirectionCreate struct {
	config
	mutation *MajorDirectionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mdc *MajorDirectionCreate) SetName(s string) *MajorDirectionCreate {
	mdc.mutation.SetName(s)
	return mdc
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mdc *MajorDirectionCreate) SetClassID(id int) *MajorDirectionCreate {
	mdc.mutation.SetClassID(id)
	return mdc
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (mdc *MajorDirectionCreate) SetNillableClassID(id *int) *MajorDirectionCreate {
	if id != nil {
		mdc = mdc.SetClassID(*id)
	}
	return mdc
}

// SetClass sets the "class" edge to the Class entity.
func (mdc *MajorDirectionCreate) SetClass(c *Class) *MajorDirectionCreate {
	return mdc.SetClassID(c.ID)
}

// Mutation returns the MajorDirectionMutation object of the builder.
func (mdc *MajorDirectionCreate) Mutation() *MajorDirectionMutation {
	return mdc.mutation
}

// Save creates the MajorDirection in the database.
func (mdc *MajorDirectionCreate) Save(ctx context.Context) (*MajorDirection, error) {
	return withHooks[*MajorDirection, MajorDirectionMutation](ctx, mdc.sqlSave, mdc.mutation, mdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdc *MajorDirectionCreate) SaveX(ctx context.Context) *MajorDirection {
	v, err := mdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdc *MajorDirectionCreate) Exec(ctx context.Context) error {
	_, err := mdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdc *MajorDirectionCreate) ExecX(ctx context.Context) {
	if err := mdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdc *MajorDirectionCreate) check() error {
	if _, ok := mdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`domain: missing required field "MajorDirection.name"`)}
	}
	return nil
}

func (mdc *MajorDirectionCreate) sqlSave(ctx context.Context) (*MajorDirection, error) {
	if err := mdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mdc.mutation.id = &_node.ID
	mdc.mutation.done = true
	return _node, nil
}

func (mdc *MajorDirectionCreate) createSpec() (*MajorDirection, *sqlgraph.CreateSpec) {
	var (
		_node = &MajorDirection{config: mdc.config}
		_spec = sqlgraph.NewCreateSpec(majordirection.Table, sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt))
	)
	if value, ok := mdc.mutation.Name(); ok {
		_spec.SetField(majordirection.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := mdc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   majordirection.ClassTable,
			Columns: []string{majordirection.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MajorDirectionCreateBulk is the builder for creating many MajorDirection entities in bulk.
type MajorDirectionCreateBulk struct {
	config
	builders []*MajorDirectionCreate
}

// Save creates the MajorDirection entities in the database.
func (mdcb *MajorDirectionCreateBulk) Save(ctx context.Context) ([]*MajorDirection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mdcb.builders))
	nodes := make([]*MajorDirection, len(mdcb.builders))
	mutators := make([]Mutator, len(mdcb.builders))
	for i := range mdcb.builders {
		func(i int, root context.Context) {
			builder := mdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MajorDirectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdcb *MajorDirectionCreateBulk) SaveX(ctx context.Context) []*MajorDirection {
	v, err := mdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdcb *MajorDirectionCreateBulk) Exec(ctx context.Context) error {
	_, err := mdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdcb *MajorDirectionCreateBulk) ExecX(ctx context.Context) {
	if err := mdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
