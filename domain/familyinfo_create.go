// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/familyinfo"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// FamilyInfoCreate is the builder for creating a FamilyInfo entity.
type FamilyInfoCreate struct {
	config
	mutation *FamilyInfoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (fic *FamilyInfoCreate) SetName(s string) *FamilyInfoCreate {
	fic.mutation.SetName(s)
	return fic
}

// SetRelationship sets the "relationship" field.
func (fic *FamilyInfoCreate) SetRelationship(s string) *FamilyInfoCreate {
	fic.mutation.SetRelationship(s)
	return fic
}

// SetIDCard sets the "id_card" field.
func (fic *FamilyInfoCreate) SetIDCard(s string) *FamilyInfoCreate {
	fic.mutation.SetIDCard(s)
	return fic
}

// SetAge sets the "age" field.
func (fic *FamilyInfoCreate) SetAge(s string) *FamilyInfoCreate {
	fic.mutation.SetAge(s)
	return fic
}

// SetOccupation sets the "occupation" field.
func (fic *FamilyInfoCreate) SetOccupation(s string) *FamilyInfoCreate {
	fic.mutation.SetOccupation(s)
	return fic
}

// SetPost sets the "post" field.
func (fic *FamilyInfoCreate) SetPost(s string) *FamilyInfoCreate {
	fic.mutation.SetPost(s)
	return fic
}

// SetWorkUnit sets the "work_unit" field.
func (fic *FamilyInfoCreate) SetWorkUnit(s string) *FamilyInfoCreate {
	fic.mutation.SetWorkUnit(s)
	return fic
}

// SetContactNumber sets the "contact_number" field.
func (fic *FamilyInfoCreate) SetContactNumber(s string) *FamilyInfoCreate {
	fic.mutation.SetContactNumber(s)
	return fic
}

// SetHealth sets the "health" field.
func (fic *FamilyInfoCreate) SetHealth(s string) *FamilyInfoCreate {
	fic.mutation.SetHealth(s)
	return fic
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (fic *FamilyInfoCreate) SetStudentID(id int) *FamilyInfoCreate {
	fic.mutation.SetStudentID(id)
	return fic
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (fic *FamilyInfoCreate) SetNillableStudentID(id *int) *FamilyInfoCreate {
	if id != nil {
		fic = fic.SetStudentID(*id)
	}
	return fic
}

// SetStudent sets the "student" edge to the Student entity.
func (fic *FamilyInfoCreate) SetStudent(s *Student) *FamilyInfoCreate {
	return fic.SetStudentID(s.ID)
}

// Mutation returns the FamilyInfoMutation object of the builder.
func (fic *FamilyInfoCreate) Mutation() *FamilyInfoMutation {
	return fic.mutation
}

// Save creates the FamilyInfo in the database.
func (fic *FamilyInfoCreate) Save(ctx context.Context) (*FamilyInfo, error) {
	return withHooks[*FamilyInfo, FamilyInfoMutation](ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FamilyInfoCreate) SaveX(ctx context.Context) *FamilyInfo {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FamilyInfoCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FamilyInfoCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FamilyInfoCreate) check() error {
	if _, ok := fic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`domain: missing required field "FamilyInfo.name"`)}
	}
	if _, ok := fic.mutation.Relationship(); !ok {
		return &ValidationError{Name: "relationship", err: errors.New(`domain: missing required field "FamilyInfo.relationship"`)}
	}
	if _, ok := fic.mutation.IDCard(); !ok {
		return &ValidationError{Name: "id_card", err: errors.New(`domain: missing required field "FamilyInfo.id_card"`)}
	}
	if _, ok := fic.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`domain: missing required field "FamilyInfo.age"`)}
	}
	if _, ok := fic.mutation.Occupation(); !ok {
		return &ValidationError{Name: "occupation", err: errors.New(`domain: missing required field "FamilyInfo.occupation"`)}
	}
	if _, ok := fic.mutation.Post(); !ok {
		return &ValidationError{Name: "post", err: errors.New(`domain: missing required field "FamilyInfo.post"`)}
	}
	if _, ok := fic.mutation.WorkUnit(); !ok {
		return &ValidationError{Name: "work_unit", err: errors.New(`domain: missing required field "FamilyInfo.work_unit"`)}
	}
	if _, ok := fic.mutation.ContactNumber(); !ok {
		return &ValidationError{Name: "contact_number", err: errors.New(`domain: missing required field "FamilyInfo.contact_number"`)}
	}
	if _, ok := fic.mutation.Health(); !ok {
		return &ValidationError{Name: "health", err: errors.New(`domain: missing required field "FamilyInfo.health"`)}
	}
	return nil
}

func (fic *FamilyInfoCreate) sqlSave(ctx context.Context) (*FamilyInfo, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FamilyInfoCreate) createSpec() (*FamilyInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &FamilyInfo{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(familyinfo.Table, sqlgraph.NewFieldSpec(familyinfo.FieldID, field.TypeInt))
	)
	if value, ok := fic.mutation.Name(); ok {
		_spec.SetField(familyinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fic.mutation.Relationship(); ok {
		_spec.SetField(familyinfo.FieldRelationship, field.TypeString, value)
		_node.Relationship = value
	}
	if value, ok := fic.mutation.IDCard(); ok {
		_spec.SetField(familyinfo.FieldIDCard, field.TypeString, value)
		_node.IDCard = value
	}
	if value, ok := fic.mutation.Age(); ok {
		_spec.SetField(familyinfo.FieldAge, field.TypeString, value)
		_node.Age = value
	}
	if value, ok := fic.mutation.Occupation(); ok {
		_spec.SetField(familyinfo.FieldOccupation, field.TypeString, value)
		_node.Occupation = value
	}
	if value, ok := fic.mutation.Post(); ok {
		_spec.SetField(familyinfo.FieldPost, field.TypeString, value)
		_node.Post = value
	}
	if value, ok := fic.mutation.WorkUnit(); ok {
		_spec.SetField(familyinfo.FieldWorkUnit, field.TypeString, value)
		_node.WorkUnit = value
	}
	if value, ok := fic.mutation.ContactNumber(); ok {
		_spec.SetField(familyinfo.FieldContactNumber, field.TypeString, value)
		_node.ContactNumber = value
	}
	if value, ok := fic.mutation.Health(); ok {
		_spec.SetField(familyinfo.FieldHealth, field.TypeString, value)
		_node.Health = value
	}
	if nodes := fic.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   familyinfo.StudentTable,
			Columns: []string{familyinfo.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.family_info_student = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FamilyInfoCreateBulk is the builder for creating many FamilyInfo entities in bulk.
type FamilyInfoCreateBulk struct {
	config
	builders []*FamilyInfoCreate
}

// Save creates the FamilyInfo entities in the database.
func (ficb *FamilyInfoCreateBulk) Save(ctx context.Context) ([]*FamilyInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FamilyInfo, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FamilyInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FamilyInfoCreateBulk) SaveX(ctx context.Context) []*FamilyInfo {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FamilyInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FamilyInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
