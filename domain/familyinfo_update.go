// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/familyinfo"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// FamilyInfoUpdate is the builder for updating FamilyInfo entities.
type FamilyInfoUpdate struct {
	config
	hooks    []Hook
	mutation *FamilyInfoMutation
}

// Where appends a list predicates to the FamilyInfoUpdate builder.
func (fiu *FamilyInfoUpdate) Where(ps ...predicate.FamilyInfo) *FamilyInfoUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetName sets the "name" field.
func (fiu *FamilyInfoUpdate) SetName(s string) *FamilyInfoUpdate {
	fiu.mutation.SetName(s)
	return fiu
}

// SetRelationship sets the "relationship" field.
func (fiu *FamilyInfoUpdate) SetRelationship(s string) *FamilyInfoUpdate {
	fiu.mutation.SetRelationship(s)
	return fiu
}

// SetIDCard sets the "id_card" field.
func (fiu *FamilyInfoUpdate) SetIDCard(s string) *FamilyInfoUpdate {
	fiu.mutation.SetIDCard(s)
	return fiu
}

// SetAge sets the "age" field.
func (fiu *FamilyInfoUpdate) SetAge(s string) *FamilyInfoUpdate {
	fiu.mutation.SetAge(s)
	return fiu
}

// SetOccupation sets the "occupation" field.
func (fiu *FamilyInfoUpdate) SetOccupation(s string) *FamilyInfoUpdate {
	fiu.mutation.SetOccupation(s)
	return fiu
}

// SetPost sets the "post" field.
func (fiu *FamilyInfoUpdate) SetPost(s string) *FamilyInfoUpdate {
	fiu.mutation.SetPost(s)
	return fiu
}

// SetWorkUnit sets the "work_unit" field.
func (fiu *FamilyInfoUpdate) SetWorkUnit(s string) *FamilyInfoUpdate {
	fiu.mutation.SetWorkUnit(s)
	return fiu
}

// SetContactNumber sets the "contact_number" field.
func (fiu *FamilyInfoUpdate) SetContactNumber(s string) *FamilyInfoUpdate {
	fiu.mutation.SetContactNumber(s)
	return fiu
}

// SetHealth sets the "health" field.
func (fiu *FamilyInfoUpdate) SetHealth(s string) *FamilyInfoUpdate {
	fiu.mutation.SetHealth(s)
	return fiu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (fiu *FamilyInfoUpdate) SetStudentID(id int) *FamilyInfoUpdate {
	fiu.mutation.SetStudentID(id)
	return fiu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (fiu *FamilyInfoUpdate) SetNillableStudentID(id *int) *FamilyInfoUpdate {
	if id != nil {
		fiu = fiu.SetStudentID(*id)
	}
	return fiu
}

// SetStudent sets the "student" edge to the Student entity.
func (fiu *FamilyInfoUpdate) SetStudent(s *Student) *FamilyInfoUpdate {
	return fiu.SetStudentID(s.ID)
}

// Mutation returns the FamilyInfoMutation object of the builder.
func (fiu *FamilyInfoUpdate) Mutation() *FamilyInfoMutation {
	return fiu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (fiu *FamilyInfoUpdate) ClearStudent() *FamilyInfoUpdate {
	fiu.mutation.ClearStudent()
	return fiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FamilyInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FamilyInfoMutation](ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FamilyInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FamilyInfoUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FamilyInfoUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiu *FamilyInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(familyinfo.Table, familyinfo.Columns, sqlgraph.NewFieldSpec(familyinfo.FieldID, field.TypeInt))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.Name(); ok {
		_spec.SetField(familyinfo.FieldName, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Relationship(); ok {
		_spec.SetField(familyinfo.FieldRelationship, field.TypeString, value)
	}
	if value, ok := fiu.mutation.IDCard(); ok {
		_spec.SetField(familyinfo.FieldIDCard, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Age(); ok {
		_spec.SetField(familyinfo.FieldAge, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Occupation(); ok {
		_spec.SetField(familyinfo.FieldOccupation, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Post(); ok {
		_spec.SetField(familyinfo.FieldPost, field.TypeString, value)
	}
	if value, ok := fiu.mutation.WorkUnit(); ok {
		_spec.SetField(familyinfo.FieldWorkUnit, field.TypeString, value)
	}
	if value, ok := fiu.mutation.ContactNumber(); ok {
		_spec.SetField(familyinfo.FieldContactNumber, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Health(); ok {
		_spec.SetField(familyinfo.FieldHealth, field.TypeString, value)
	}
	if fiu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   familyinfo.StudentTable,
			Columns: []string{familyinfo.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   familyinfo.StudentTable,
			Columns: []string{familyinfo.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{familyinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FamilyInfoUpdateOne is the builder for updating a single FamilyInfo entity.
type FamilyInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FamilyInfoMutation
}

// SetName sets the "name" field.
func (fiuo *FamilyInfoUpdateOne) SetName(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetName(s)
	return fiuo
}

// SetRelationship sets the "relationship" field.
func (fiuo *FamilyInfoUpdateOne) SetRelationship(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetRelationship(s)
	return fiuo
}

// SetIDCard sets the "id_card" field.
func (fiuo *FamilyInfoUpdateOne) SetIDCard(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetIDCard(s)
	return fiuo
}

// SetAge sets the "age" field.
func (fiuo *FamilyInfoUpdateOne) SetAge(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetAge(s)
	return fiuo
}

// SetOccupation sets the "occupation" field.
func (fiuo *FamilyInfoUpdateOne) SetOccupation(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetOccupation(s)
	return fiuo
}

// SetPost sets the "post" field.
func (fiuo *FamilyInfoUpdateOne) SetPost(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetPost(s)
	return fiuo
}

// SetWorkUnit sets the "work_unit" field.
func (fiuo *FamilyInfoUpdateOne) SetWorkUnit(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetWorkUnit(s)
	return fiuo
}

// SetContactNumber sets the "contact_number" field.
func (fiuo *FamilyInfoUpdateOne) SetContactNumber(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetContactNumber(s)
	return fiuo
}

// SetHealth sets the "health" field.
func (fiuo *FamilyInfoUpdateOne) SetHealth(s string) *FamilyInfoUpdateOne {
	fiuo.mutation.SetHealth(s)
	return fiuo
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (fiuo *FamilyInfoUpdateOne) SetStudentID(id int) *FamilyInfoUpdateOne {
	fiuo.mutation.SetStudentID(id)
	return fiuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (fiuo *FamilyInfoUpdateOne) SetNillableStudentID(id *int) *FamilyInfoUpdateOne {
	if id != nil {
		fiuo = fiuo.SetStudentID(*id)
	}
	return fiuo
}

// SetStudent sets the "student" edge to the Student entity.
func (fiuo *FamilyInfoUpdateOne) SetStudent(s *Student) *FamilyInfoUpdateOne {
	return fiuo.SetStudentID(s.ID)
}

// Mutation returns the FamilyInfoMutation object of the builder.
func (fiuo *FamilyInfoUpdateOne) Mutation() *FamilyInfoMutation {
	return fiuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (fiuo *FamilyInfoUpdateOne) ClearStudent() *FamilyInfoUpdateOne {
	fiuo.mutation.ClearStudent()
	return fiuo
}

// Where appends a list predicates to the FamilyInfoUpdate builder.
func (fiuo *FamilyInfoUpdateOne) Where(ps ...predicate.FamilyInfo) *FamilyInfoUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FamilyInfoUpdateOne) Select(field string, fields ...string) *FamilyInfoUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FamilyInfo entity.
func (fiuo *FamilyInfoUpdateOne) Save(ctx context.Context) (*FamilyInfo, error) {
	return withHooks[*FamilyInfo, FamilyInfoMutation](ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FamilyInfoUpdateOne) SaveX(ctx context.Context) *FamilyInfo {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FamilyInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FamilyInfoUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiuo *FamilyInfoUpdateOne) sqlSave(ctx context.Context) (_node *FamilyInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(familyinfo.Table, familyinfo.Columns, sqlgraph.NewFieldSpec(familyinfo.FieldID, field.TypeInt))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "FamilyInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, familyinfo.FieldID)
		for _, f := range fields {
			if !familyinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != familyinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.Name(); ok {
		_spec.SetField(familyinfo.FieldName, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Relationship(); ok {
		_spec.SetField(familyinfo.FieldRelationship, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.IDCard(); ok {
		_spec.SetField(familyinfo.FieldIDCard, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Age(); ok {
		_spec.SetField(familyinfo.FieldAge, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Occupation(); ok {
		_spec.SetField(familyinfo.FieldOccupation, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Post(); ok {
		_spec.SetField(familyinfo.FieldPost, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.WorkUnit(); ok {
		_spec.SetField(familyinfo.FieldWorkUnit, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.ContactNumber(); ok {
		_spec.SetField(familyinfo.FieldContactNumber, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Health(); ok {
		_spec.SetField(familyinfo.FieldHealth, field.TypeString, value)
	}
	if fiuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   familyinfo.StudentTable,
			Columns: []string{familyinfo.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   familyinfo.StudentTable,
			Columns: []string{familyinfo.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FamilyInfo{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{familyinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
