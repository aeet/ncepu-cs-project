// Code generated by ent, DO NOT EDIT.

package domain

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/authorization"
)

// Authorization is the model entity for the Authorization schema.
type Authorization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"client_secret,omitempty"`
	// ClientName holds the value of the "client_name" field.
	ClientName string `json:"client_name,omitempty"`
	// GrantType holds the value of the "grant_type" field.
	GrantType []string `json:"grant_type,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope []string `json:"scope,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorizationQuery when eager-loading is set.
	Edges AuthorizationEdges `json:"edges"`
}

// AuthorizationEdges holds the relations/edges for other nodes in the graph.
type AuthorizationEdges struct {
	// Resource holds the value of the resource edge.
	Resource []*Resource `json:"resource,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorizationEdges) ResourceOrErr() ([]*Resource, error) {
	if e.loadedTypes[0] {
		return e.Resource, nil
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authorization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authorization.FieldGrantType, authorization.FieldScope:
			values[i] = new([]byte)
		case authorization.FieldID:
			values[i] = new(sql.NullInt64)
		case authorization.FieldClientID, authorization.FieldClientSecret, authorization.FieldClientName, authorization.FieldRedirectURL, authorization.FieldDomain:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Authorization", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authorization fields.
func (a *Authorization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authorization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case authorization.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				a.ClientID = value.String
			}
		case authorization.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				a.ClientSecret = value.String
			}
		case authorization.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				a.ClientName = value.String
			}
		case authorization.FieldGrantType:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field grant_type", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.GrantType); err != nil {
					return fmt.Errorf("unmarshal field grant_type: %w", err)
				}
			}
		case authorization.FieldScope:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Scope); err != nil {
					return fmt.Errorf("unmarshal field scope: %w", err)
				}
			}
		case authorization.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				a.RedirectURL = value.String
			}
		case authorization.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				a.Domain = value.String
			}
		}
	}
	return nil
}

// QueryResource queries the "resource" edge of the Authorization entity.
func (a *Authorization) QueryResource() *ResourceQuery {
	return NewAuthorizationClient(a.config).QueryResource(a)
}

// Update returns a builder for updating this Authorization.
// Note that you need to call Authorization.Unwrap() before calling this method if this Authorization
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authorization) Update() *AuthorizationUpdateOne {
	return NewAuthorizationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authorization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authorization) Unwrap() *Authorization {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("domain: Authorization is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authorization) String() string {
	var builder strings.Builder
	builder.WriteString("Authorization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("client_id=")
	builder.WriteString(a.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(a.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("client_name=")
	builder.WriteString(a.ClientName)
	builder.WriteString(", ")
	builder.WriteString("grant_type=")
	builder.WriteString(fmt.Sprintf("%v", a.GrantType))
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(fmt.Sprintf("%v", a.Scope))
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(a.RedirectURL)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(a.Domain)
	builder.WriteByte(')')
	return builder.String()
}

// Authorizations is a parsable slice of Authorization.
type Authorizations []*Authorization
