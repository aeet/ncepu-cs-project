// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
)

// Major is the model entity for the Major schema.
type Major struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 专业名称
	Name string `json:"name,omitempty"`
	// 专业代码
	Code string `json:"code,omitempty"`
	// 专业描述
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MajorQuery when eager-loading is set.
	Edges            MajorEdges `json:"edges"`
	major_department *int
}

// MajorEdges holds the relations/edges for other nodes in the graph.
type MajorEdges struct {
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Student holds the value of the student edge.
	Student []*Student `json:"student,omitempty"`
	// Class holds the value of the class edge.
	Class []*Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MajorEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[0] {
		if e.Department == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading.
func (e MajorEdges) StudentOrErr() ([]*Student, error) {
	if e.loadedTypes[1] {
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading.
func (e MajorEdges) ClassOrErr() ([]*Class, error) {
	if e.loadedTypes[2] {
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Major) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case major.FieldID:
			values[i] = new(sql.NullInt64)
		case major.FieldName, major.FieldCode, major.FieldDescription:
			values[i] = new(sql.NullString)
		case major.ForeignKeys[0]: // major_department
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Major", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Major fields.
func (m *Major) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case major.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case major.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case major.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				m.Code = value.String
			}
		case major.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case major.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field major_department", value)
			} else if value.Valid {
				m.major_department = new(int)
				*m.major_department = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDepartment queries the "department" edge of the Major entity.
func (m *Major) QueryDepartment() *DepartmentQuery {
	return NewMajorClient(m.config).QueryDepartment(m)
}

// QueryStudent queries the "student" edge of the Major entity.
func (m *Major) QueryStudent() *StudentQuery {
	return NewMajorClient(m.config).QueryStudent(m)
}

// QueryClass queries the "class" edge of the Major entity.
func (m *Major) QueryClass() *ClassQuery {
	return NewMajorClient(m.config).QueryClass(m)
}

// Update returns a builder for updating this Major.
// Note that you need to call Major.Unwrap() before calling this method if this Major
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Major) Update() *MajorUpdateOne {
	return NewMajorClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Major entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Major) Unwrap() *Major {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("domain: Major is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Major) String() string {
	var builder strings.Builder
	builder.WriteString("Major(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(m.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Majors is a parsable slice of Major.
type Majors []*Major
