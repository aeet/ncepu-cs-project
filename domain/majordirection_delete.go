// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/majordirection"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
)

// MajorDirectionDelete is the builder for deleting a MajorDirection entity.
type MajorDirectionDelete struct {
	config
	hooks    []Hook
	mutation *MajorDirectionMutation
}

// Where appends a list predicates to the MajorDirectionDelete builder.
func (mdd *MajorDirectionDelete) Where(ps ...predicate.MajorDirection) *MajorDirectionDelete {
	mdd.mutation.Where(ps...)
	return mdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mdd *MajorDirectionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MajorDirectionMutation](ctx, mdd.sqlExec, mdd.mutation, mdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mdd *MajorDirectionDelete) ExecX(ctx context.Context) int {
	n, err := mdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mdd *MajorDirectionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(majordirection.Table, sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt))
	if ps := mdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mdd.mutation.done = true
	return affected, err
}

// MajorDirectionDeleteOne is the builder for deleting a single MajorDirection entity.
type MajorDirectionDeleteOne struct {
	mdd *MajorDirectionDelete
}

// Where appends a list predicates to the MajorDirectionDelete builder.
func (mddo *MajorDirectionDeleteOne) Where(ps ...predicate.MajorDirection) *MajorDirectionDeleteOne {
	mddo.mdd.mutation.Where(ps...)
	return mddo
}

// Exec executes the deletion query.
func (mddo *MajorDirectionDeleteOne) Exec(ctx context.Context) error {
	n, err := mddo.mdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{majordirection.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mddo *MajorDirectionDeleteOne) ExecX(ctx context.Context) {
	if err := mddo.Exec(ctx); err != nil {
		panic(err)
	}
}
