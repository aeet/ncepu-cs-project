// Code generated by ent, DO NOT EDIT.

package major

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldDescription, v))
}

// SpecialType applies equality check predicate on the "special_type" field. It's identical to SpecialTypeEQ.
func SpecialType(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldSpecialType, v))
}

// EnrollmentType applies equality check predicate on the "enrollment_type" field. It's identical to EnrollmentTypeEQ.
func EnrollmentType(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldEnrollmentType, v))
}

// IsMajorCategory applies equality check predicate on the "is_major_category" field. It's identical to IsMajorCategoryEQ.
func IsMajorCategory(v bool) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldIsMajorCategory, v))
}

// MajorCategory applies equality check predicate on the "major_category" field. It's identical to MajorCategoryEQ.
func MajorCategory(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldMajorCategory, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Major {
	return predicate.Major(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Major {
	return predicate.Major(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Major {
	return predicate.Major(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Major {
	return predicate.Major(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Major {
	return predicate.Major(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Major {
	return predicate.Major(sql.FieldContainsFold(FieldCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Major {
	return predicate.Major(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Major {
	return predicate.Major(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Major {
	return predicate.Major(sql.FieldContainsFold(FieldDescription, v))
}

// SpecialTypeEQ applies the EQ predicate on the "special_type" field.
func SpecialTypeEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldSpecialType, v))
}

// SpecialTypeNEQ applies the NEQ predicate on the "special_type" field.
func SpecialTypeNEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldSpecialType, v))
}

// SpecialTypeIn applies the In predicate on the "special_type" field.
func SpecialTypeIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldSpecialType, vs...))
}

// SpecialTypeNotIn applies the NotIn predicate on the "special_type" field.
func SpecialTypeNotIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldSpecialType, vs...))
}

// SpecialTypeGT applies the GT predicate on the "special_type" field.
func SpecialTypeGT(v string) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldSpecialType, v))
}

// SpecialTypeGTE applies the GTE predicate on the "special_type" field.
func SpecialTypeGTE(v string) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldSpecialType, v))
}

// SpecialTypeLT applies the LT predicate on the "special_type" field.
func SpecialTypeLT(v string) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldSpecialType, v))
}

// SpecialTypeLTE applies the LTE predicate on the "special_type" field.
func SpecialTypeLTE(v string) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldSpecialType, v))
}

// SpecialTypeContains applies the Contains predicate on the "special_type" field.
func SpecialTypeContains(v string) predicate.Major {
	return predicate.Major(sql.FieldContains(FieldSpecialType, v))
}

// SpecialTypeHasPrefix applies the HasPrefix predicate on the "special_type" field.
func SpecialTypeHasPrefix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasPrefix(FieldSpecialType, v))
}

// SpecialTypeHasSuffix applies the HasSuffix predicate on the "special_type" field.
func SpecialTypeHasSuffix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasSuffix(FieldSpecialType, v))
}

// SpecialTypeEqualFold applies the EqualFold predicate on the "special_type" field.
func SpecialTypeEqualFold(v string) predicate.Major {
	return predicate.Major(sql.FieldEqualFold(FieldSpecialType, v))
}

// SpecialTypeContainsFold applies the ContainsFold predicate on the "special_type" field.
func SpecialTypeContainsFold(v string) predicate.Major {
	return predicate.Major(sql.FieldContainsFold(FieldSpecialType, v))
}

// EnrollmentTypeEQ applies the EQ predicate on the "enrollment_type" field.
func EnrollmentTypeEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldEnrollmentType, v))
}

// EnrollmentTypeNEQ applies the NEQ predicate on the "enrollment_type" field.
func EnrollmentTypeNEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldEnrollmentType, v))
}

// EnrollmentTypeIn applies the In predicate on the "enrollment_type" field.
func EnrollmentTypeIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldEnrollmentType, vs...))
}

// EnrollmentTypeNotIn applies the NotIn predicate on the "enrollment_type" field.
func EnrollmentTypeNotIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldEnrollmentType, vs...))
}

// EnrollmentTypeGT applies the GT predicate on the "enrollment_type" field.
func EnrollmentTypeGT(v string) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldEnrollmentType, v))
}

// EnrollmentTypeGTE applies the GTE predicate on the "enrollment_type" field.
func EnrollmentTypeGTE(v string) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldEnrollmentType, v))
}

// EnrollmentTypeLT applies the LT predicate on the "enrollment_type" field.
func EnrollmentTypeLT(v string) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldEnrollmentType, v))
}

// EnrollmentTypeLTE applies the LTE predicate on the "enrollment_type" field.
func EnrollmentTypeLTE(v string) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldEnrollmentType, v))
}

// EnrollmentTypeContains applies the Contains predicate on the "enrollment_type" field.
func EnrollmentTypeContains(v string) predicate.Major {
	return predicate.Major(sql.FieldContains(FieldEnrollmentType, v))
}

// EnrollmentTypeHasPrefix applies the HasPrefix predicate on the "enrollment_type" field.
func EnrollmentTypeHasPrefix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasPrefix(FieldEnrollmentType, v))
}

// EnrollmentTypeHasSuffix applies the HasSuffix predicate on the "enrollment_type" field.
func EnrollmentTypeHasSuffix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasSuffix(FieldEnrollmentType, v))
}

// EnrollmentTypeEqualFold applies the EqualFold predicate on the "enrollment_type" field.
func EnrollmentTypeEqualFold(v string) predicate.Major {
	return predicate.Major(sql.FieldEqualFold(FieldEnrollmentType, v))
}

// EnrollmentTypeContainsFold applies the ContainsFold predicate on the "enrollment_type" field.
func EnrollmentTypeContainsFold(v string) predicate.Major {
	return predicate.Major(sql.FieldContainsFold(FieldEnrollmentType, v))
}

// IsMajorCategoryEQ applies the EQ predicate on the "is_major_category" field.
func IsMajorCategoryEQ(v bool) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldIsMajorCategory, v))
}

// IsMajorCategoryNEQ applies the NEQ predicate on the "is_major_category" field.
func IsMajorCategoryNEQ(v bool) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldIsMajorCategory, v))
}

// MajorCategoryEQ applies the EQ predicate on the "major_category" field.
func MajorCategoryEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldEQ(FieldMajorCategory, v))
}

// MajorCategoryNEQ applies the NEQ predicate on the "major_category" field.
func MajorCategoryNEQ(v string) predicate.Major {
	return predicate.Major(sql.FieldNEQ(FieldMajorCategory, v))
}

// MajorCategoryIn applies the In predicate on the "major_category" field.
func MajorCategoryIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldIn(FieldMajorCategory, vs...))
}

// MajorCategoryNotIn applies the NotIn predicate on the "major_category" field.
func MajorCategoryNotIn(vs ...string) predicate.Major {
	return predicate.Major(sql.FieldNotIn(FieldMajorCategory, vs...))
}

// MajorCategoryGT applies the GT predicate on the "major_category" field.
func MajorCategoryGT(v string) predicate.Major {
	return predicate.Major(sql.FieldGT(FieldMajorCategory, v))
}

// MajorCategoryGTE applies the GTE predicate on the "major_category" field.
func MajorCategoryGTE(v string) predicate.Major {
	return predicate.Major(sql.FieldGTE(FieldMajorCategory, v))
}

// MajorCategoryLT applies the LT predicate on the "major_category" field.
func MajorCategoryLT(v string) predicate.Major {
	return predicate.Major(sql.FieldLT(FieldMajorCategory, v))
}

// MajorCategoryLTE applies the LTE predicate on the "major_category" field.
func MajorCategoryLTE(v string) predicate.Major {
	return predicate.Major(sql.FieldLTE(FieldMajorCategory, v))
}

// MajorCategoryContains applies the Contains predicate on the "major_category" field.
func MajorCategoryContains(v string) predicate.Major {
	return predicate.Major(sql.FieldContains(FieldMajorCategory, v))
}

// MajorCategoryHasPrefix applies the HasPrefix predicate on the "major_category" field.
func MajorCategoryHasPrefix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasPrefix(FieldMajorCategory, v))
}

// MajorCategoryHasSuffix applies the HasSuffix predicate on the "major_category" field.
func MajorCategoryHasSuffix(v string) predicate.Major {
	return predicate.Major(sql.FieldHasSuffix(FieldMajorCategory, v))
}

// MajorCategoryEqualFold applies the EqualFold predicate on the "major_category" field.
func MajorCategoryEqualFold(v string) predicate.Major {
	return predicate.Major(sql.FieldEqualFold(FieldMajorCategory, v))
}

// MajorCategoryContainsFold applies the ContainsFold predicate on the "major_category" field.
func MajorCategoryContainsFold(v string) predicate.Major {
	return predicate.Major(sql.FieldContainsFold(FieldMajorCategory, v))
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Major) predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Major) predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Major) predicate.Major {
	return predicate.Major(func(s *sql.Selector) {
		p(s.Not())
	})
}
