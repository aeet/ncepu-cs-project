// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/campus"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
	"github.com/devcui/ncepu-cs-project/domain/majordirection"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
	"github.com/devcui/ncepu-cs-project/domain/tutor"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cu *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetMajorID sets the "major" edge to the Major entity by ID.
func (cu *ClassUpdate) SetMajorID(id int) *ClassUpdate {
	cu.mutation.SetMajorID(id)
	return cu
}

// SetNillableMajorID sets the "major" edge to the Major entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableMajorID(id *int) *ClassUpdate {
	if id != nil {
		cu = cu.SetMajorID(*id)
	}
	return cu
}

// SetMajor sets the "major" edge to the Major entity.
func (cu *ClassUpdate) SetMajor(m *Major) *ClassUpdate {
	return cu.SetMajorID(m.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (cu *ClassUpdate) SetDepartmentID(id int) *ClassUpdate {
	cu.mutation.SetDepartmentID(id)
	return cu
}

// SetNillableDepartmentID sets the "department" edge to the Department entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableDepartmentID(id *int) *ClassUpdate {
	if id != nil {
		cu = cu.SetDepartmentID(*id)
	}
	return cu
}

// SetDepartment sets the "department" edge to the Department entity.
func (cu *ClassUpdate) SetDepartment(d *Department) *ClassUpdate {
	return cu.SetDepartmentID(d.ID)
}

// SetCampusID sets the "campus" edge to the Campus entity by ID.
func (cu *ClassUpdate) SetCampusID(id int) *ClassUpdate {
	cu.mutation.SetCampusID(id)
	return cu
}

// SetNillableCampusID sets the "campus" edge to the Campus entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableCampusID(id *int) *ClassUpdate {
	if id != nil {
		cu = cu.SetCampusID(*id)
	}
	return cu
}

// SetCampus sets the "campus" edge to the Campus entity.
func (cu *ClassUpdate) SetCampus(c *Campus) *ClassUpdate {
	return cu.SetCampusID(c.ID)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (cu *ClassUpdate) AddStudentIDs(ids ...int) *ClassUpdate {
	cu.mutation.AddStudentIDs(ids...)
	return cu
}

// AddStudent adds the "student" edges to the Student entity.
func (cu *ClassUpdate) AddStudent(s ...*Student) *ClassUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddStudentIDs(ids...)
}

// SetClassLeaderID sets the "class_leader" edge to the ClassLeader entity by ID.
func (cu *ClassUpdate) SetClassLeaderID(id int) *ClassUpdate {
	cu.mutation.SetClassLeaderID(id)
	return cu
}

// SetNillableClassLeaderID sets the "class_leader" edge to the ClassLeader entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableClassLeaderID(id *int) *ClassUpdate {
	if id != nil {
		cu = cu.SetClassLeaderID(*id)
	}
	return cu
}

// SetClassLeader sets the "class_leader" edge to the ClassLeader entity.
func (cu *ClassUpdate) SetClassLeader(c *ClassLeader) *ClassUpdate {
	return cu.SetClassLeaderID(c.ID)
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (cu *ClassUpdate) SetTutorID(id int) *ClassUpdate {
	cu.mutation.SetTutorID(id)
	return cu
}

// SetNillableTutorID sets the "tutor" edge to the Tutor entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableTutorID(id *int) *ClassUpdate {
	if id != nil {
		cu = cu.SetTutorID(*id)
	}
	return cu
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (cu *ClassUpdate) SetTutor(t *Tutor) *ClassUpdate {
	return cu.SetTutorID(t.ID)
}

// SetMajorDirectionID sets the "major_direction" edge to the MajorDirection entity by ID.
func (cu *ClassUpdate) SetMajorDirectionID(id int) *ClassUpdate {
	cu.mutation.SetMajorDirectionID(id)
	return cu
}

// SetNillableMajorDirectionID sets the "major_direction" edge to the MajorDirection entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableMajorDirectionID(id *int) *ClassUpdate {
	if id != nil {
		cu = cu.SetMajorDirectionID(*id)
	}
	return cu
}

// SetMajorDirection sets the "major_direction" edge to the MajorDirection entity.
func (cu *ClassUpdate) SetMajorDirection(m *MajorDirection) *ClassUpdate {
	return cu.SetMajorDirectionID(m.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cu *ClassUpdate) Mutation() *ClassMutation {
	return cu.mutation
}

// ClearMajor clears the "major" edge to the Major entity.
func (cu *ClassUpdate) ClearMajor() *ClassUpdate {
	cu.mutation.ClearMajor()
	return cu
}

// ClearDepartment clears the "department" edge to the Department entity.
func (cu *ClassUpdate) ClearDepartment() *ClassUpdate {
	cu.mutation.ClearDepartment()
	return cu
}

// ClearCampus clears the "campus" edge to the Campus entity.
func (cu *ClassUpdate) ClearCampus() *ClassUpdate {
	cu.mutation.ClearCampus()
	return cu
}

// ClearStudent clears all "student" edges to the Student entity.
func (cu *ClassUpdate) ClearStudent() *ClassUpdate {
	cu.mutation.ClearStudent()
	return cu
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (cu *ClassUpdate) RemoveStudentIDs(ids ...int) *ClassUpdate {
	cu.mutation.RemoveStudentIDs(ids...)
	return cu
}

// RemoveStudent removes "student" edges to Student entities.
func (cu *ClassUpdate) RemoveStudent(s ...*Student) *ClassUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveStudentIDs(ids...)
}

// ClearClassLeader clears the "class_leader" edge to the ClassLeader entity.
func (cu *ClassUpdate) ClearClassLeader() *ClassUpdate {
	cu.mutation.ClearClassLeader()
	return cu
}

// ClearTutor clears the "tutor" edge to the Tutor entity.
func (cu *ClassUpdate) ClearTutor() *ClassUpdate {
	cu.mutation.ClearTutor()
	return cu
}

// ClearMajorDirection clears the "major_direction" edge to the MajorDirection entity.
func (cu *ClassUpdate) ClearMajorDirection() *ClassUpdate {
	cu.mutation.ClearMajorDirection()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClassMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.MajorTable,
			Columns: []string{class.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.MajorTable,
			Columns: []string{class.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.DepartmentTable,
			Columns: []string{class.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.DepartmentTable,
			Columns: []string{class.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CampusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.CampusTable,
			Columns: []string{class.CampusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CampusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.CampusTable,
			Columns: []string{class.CampusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStudentIDs(); len(nodes) > 0 && !cu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassLeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.ClassLeaderTable,
			Columns: []string{class.ClassLeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassLeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.ClassLeaderTable,
			Columns: []string{class.ClassLeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.TutorTable,
			Columns: []string{class.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.TutorTable,
			Columns: []string{class.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MajorDirectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.MajorDirectionTable,
			Columns: []string{class.MajorDirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MajorDirectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.MajorDirectionTable,
			Columns: []string{class.MajorDirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// SetMajorID sets the "major" edge to the Major entity by ID.
func (cuo *ClassUpdateOne) SetMajorID(id int) *ClassUpdateOne {
	cuo.mutation.SetMajorID(id)
	return cuo
}

// SetNillableMajorID sets the "major" edge to the Major entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableMajorID(id *int) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetMajorID(*id)
	}
	return cuo
}

// SetMajor sets the "major" edge to the Major entity.
func (cuo *ClassUpdateOne) SetMajor(m *Major) *ClassUpdateOne {
	return cuo.SetMajorID(m.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (cuo *ClassUpdateOne) SetDepartmentID(id int) *ClassUpdateOne {
	cuo.mutation.SetDepartmentID(id)
	return cuo
}

// SetNillableDepartmentID sets the "department" edge to the Department entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableDepartmentID(id *int) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetDepartmentID(*id)
	}
	return cuo
}

// SetDepartment sets the "department" edge to the Department entity.
func (cuo *ClassUpdateOne) SetDepartment(d *Department) *ClassUpdateOne {
	return cuo.SetDepartmentID(d.ID)
}

// SetCampusID sets the "campus" edge to the Campus entity by ID.
func (cuo *ClassUpdateOne) SetCampusID(id int) *ClassUpdateOne {
	cuo.mutation.SetCampusID(id)
	return cuo
}

// SetNillableCampusID sets the "campus" edge to the Campus entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableCampusID(id *int) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetCampusID(*id)
	}
	return cuo
}

// SetCampus sets the "campus" edge to the Campus entity.
func (cuo *ClassUpdateOne) SetCampus(c *Campus) *ClassUpdateOne {
	return cuo.SetCampusID(c.ID)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (cuo *ClassUpdateOne) AddStudentIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.AddStudentIDs(ids...)
	return cuo
}

// AddStudent adds the "student" edges to the Student entity.
func (cuo *ClassUpdateOne) AddStudent(s ...*Student) *ClassUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddStudentIDs(ids...)
}

// SetClassLeaderID sets the "class_leader" edge to the ClassLeader entity by ID.
func (cuo *ClassUpdateOne) SetClassLeaderID(id int) *ClassUpdateOne {
	cuo.mutation.SetClassLeaderID(id)
	return cuo
}

// SetNillableClassLeaderID sets the "class_leader" edge to the ClassLeader entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableClassLeaderID(id *int) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetClassLeaderID(*id)
	}
	return cuo
}

// SetClassLeader sets the "class_leader" edge to the ClassLeader entity.
func (cuo *ClassUpdateOne) SetClassLeader(c *ClassLeader) *ClassUpdateOne {
	return cuo.SetClassLeaderID(c.ID)
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (cuo *ClassUpdateOne) SetTutorID(id int) *ClassUpdateOne {
	cuo.mutation.SetTutorID(id)
	return cuo
}

// SetNillableTutorID sets the "tutor" edge to the Tutor entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableTutorID(id *int) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetTutorID(*id)
	}
	return cuo
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (cuo *ClassUpdateOne) SetTutor(t *Tutor) *ClassUpdateOne {
	return cuo.SetTutorID(t.ID)
}

// SetMajorDirectionID sets the "major_direction" edge to the MajorDirection entity by ID.
func (cuo *ClassUpdateOne) SetMajorDirectionID(id int) *ClassUpdateOne {
	cuo.mutation.SetMajorDirectionID(id)
	return cuo
}

// SetNillableMajorDirectionID sets the "major_direction" edge to the MajorDirection entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableMajorDirectionID(id *int) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetMajorDirectionID(*id)
	}
	return cuo
}

// SetMajorDirection sets the "major_direction" edge to the MajorDirection entity.
func (cuo *ClassUpdateOne) SetMajorDirection(m *MajorDirection) *ClassUpdateOne {
	return cuo.SetMajorDirectionID(m.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cuo *ClassUpdateOne) Mutation() *ClassMutation {
	return cuo.mutation
}

// ClearMajor clears the "major" edge to the Major entity.
func (cuo *ClassUpdateOne) ClearMajor() *ClassUpdateOne {
	cuo.mutation.ClearMajor()
	return cuo
}

// ClearDepartment clears the "department" edge to the Department entity.
func (cuo *ClassUpdateOne) ClearDepartment() *ClassUpdateOne {
	cuo.mutation.ClearDepartment()
	return cuo
}

// ClearCampus clears the "campus" edge to the Campus entity.
func (cuo *ClassUpdateOne) ClearCampus() *ClassUpdateOne {
	cuo.mutation.ClearCampus()
	return cuo
}

// ClearStudent clears all "student" edges to the Student entity.
func (cuo *ClassUpdateOne) ClearStudent() *ClassUpdateOne {
	cuo.mutation.ClearStudent()
	return cuo
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (cuo *ClassUpdateOne) RemoveStudentIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.RemoveStudentIDs(ids...)
	return cuo
}

// RemoveStudent removes "student" edges to Student entities.
func (cuo *ClassUpdateOne) RemoveStudent(s ...*Student) *ClassUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveStudentIDs(ids...)
}

// ClearClassLeader clears the "class_leader" edge to the ClassLeader entity.
func (cuo *ClassUpdateOne) ClearClassLeader() *ClassUpdateOne {
	cuo.mutation.ClearClassLeader()
	return cuo
}

// ClearTutor clears the "tutor" edge to the Tutor entity.
func (cuo *ClassUpdateOne) ClearTutor() *ClassUpdateOne {
	cuo.mutation.ClearTutor()
	return cuo
}

// ClearMajorDirection clears the "major_direction" edge to the MajorDirection entity.
func (cuo *ClassUpdateOne) ClearMajorDirection() *ClassUpdateOne {
	cuo.mutation.ClearMajorDirection()
	return cuo
}

// Where appends a list predicates to the ClassUpdate builder.
func (cuo *ClassUpdateOne) Where(ps ...predicate.Class) *ClassUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Class entity.
func (cuo *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	return withHooks[*Class, ClassMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.MajorTable,
			Columns: []string{class.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.MajorTable,
			Columns: []string{class.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.DepartmentTable,
			Columns: []string{class.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   class.DepartmentTable,
			Columns: []string{class.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CampusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.CampusTable,
			Columns: []string{class.CampusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CampusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.CampusTable,
			Columns: []string{class.CampusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStudentIDs(); len(nodes) > 0 && !cuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentTable,
			Columns: []string{class.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassLeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.ClassLeaderTable,
			Columns: []string{class.ClassLeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassLeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.ClassLeaderTable,
			Columns: []string{class.ClassLeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.TutorTable,
			Columns: []string{class.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.TutorTable,
			Columns: []string{class.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MajorDirectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.MajorDirectionTable,
			Columns: []string{class.MajorDirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MajorDirectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   class.MajorDirectionTable,
			Columns: []string{class.MajorDirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(majordirection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
