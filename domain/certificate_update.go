// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/certificate"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// CertificateUpdate is the builder for updating Certificate entities.
type CertificateUpdate struct {
	config
	hooks    []Hook
	mutation *CertificateMutation
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cu *CertificateUpdate) Where(ps ...predicate.Certificate) *CertificateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cu *CertificateUpdate) SetStudentID(id int) *CertificateUpdate {
	cu.mutation.SetStudentID(id)
	return cu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cu *CertificateUpdate) SetNillableStudentID(id *int) *CertificateUpdate {
	if id != nil {
		cu = cu.SetStudentID(*id)
	}
	return cu
}

// SetStudent sets the "student" edge to the Student entity.
func (cu *CertificateUpdate) SetStudent(s *Student) *CertificateUpdate {
	return cu.SetStudentID(s.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cu *CertificateUpdate) Mutation() *CertificateMutation {
	return cu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (cu *CertificateUpdate) ClearStudent() *CertificateUpdate {
	cu.mutation.ClearStudent()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CertificateMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(certificate.Table, certificate.Columns, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certificate.StudentTable,
			Columns: []string{certificate.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certificate.StudentTable,
			Columns: []string{certificate.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertificateUpdateOne is the builder for updating a single Certificate entity.
type CertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificateMutation
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cuo *CertificateUpdateOne) SetStudentID(id int) *CertificateUpdateOne {
	cuo.mutation.SetStudentID(id)
	return cuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableStudentID(id *int) *CertificateUpdateOne {
	if id != nil {
		cuo = cuo.SetStudentID(*id)
	}
	return cuo
}

// SetStudent sets the "student" edge to the Student entity.
func (cuo *CertificateUpdateOne) SetStudent(s *Student) *CertificateUpdateOne {
	return cuo.SetStudentID(s.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cuo *CertificateUpdateOne) Mutation() *CertificateMutation {
	return cuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (cuo *CertificateUpdateOne) ClearStudent() *CertificateUpdateOne {
	cuo.mutation.ClearStudent()
	return cuo
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cuo *CertificateUpdateOne) Where(ps ...predicate.Certificate) *CertificateUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificateUpdateOne) Select(field string, fields ...string) *CertificateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certificate entity.
func (cuo *CertificateUpdateOne) Save(ctx context.Context) (*Certificate, error) {
	return withHooks[*Certificate, CertificateMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificateUpdateOne) SaveX(ctx context.Context) *Certificate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CertificateUpdateOne) sqlSave(ctx context.Context) (_node *Certificate, err error) {
	_spec := sqlgraph.NewUpdateSpec(certificate.Table, certificate.Columns, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "Certificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificate.FieldID)
		for _, f := range fields {
			if !certificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != certificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certificate.StudentTable,
			Columns: []string{certificate.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certificate.StudentTable,
			Columns: []string{certificate.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Certificate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
