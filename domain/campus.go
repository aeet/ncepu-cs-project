// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/campus"
	"github.com/devcui/ncepu-cs-project/domain/class"
)

// Campus is the model entity for the Campus schema.
type Campus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 校区名称
	Name string `json:"name,omitempty"`
	// 校区地址
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CampusQuery when eager-loading is set.
	Edges CampusEdges `json:"edges"`
}

// CampusEdges holds the relations/edges for other nodes in the graph.
type CampusEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CampusEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Campus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case campus.FieldID:
			values[i] = new(sql.NullInt64)
		case campus.FieldName, campus.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Campus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Campus fields.
func (c *Campus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case campus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case campus.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case campus.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		}
	}
	return nil
}

// QueryClass queries the "class" edge of the Campus entity.
func (c *Campus) QueryClass() *ClassQuery {
	return NewCampusClient(c.config).QueryClass(c)
}

// Update returns a builder for updating this Campus.
// Note that you need to call Campus.Unwrap() before calling this method if this Campus
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Campus) Update() *CampusUpdateOne {
	return NewCampusClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Campus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Campus) Unwrap() *Campus {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("domain: Campus is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Campus) String() string {
	var builder strings.Builder
	builder.WriteString("Campus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteByte(')')
	return builder.String()
}

// CampusSlice is a parsable slice of Campus.
type CampusSlice []*Campus
