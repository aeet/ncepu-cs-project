// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/practicalexperience"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// PracticalExperienceCreate is the builder for creating a PracticalExperience entity.
type PracticalExperienceCreate struct {
	config
	mutation *PracticalExperienceMutation
	hooks    []Hook
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (pec *PracticalExperienceCreate) SetStudentID(id int) *PracticalExperienceCreate {
	pec.mutation.SetStudentID(id)
	return pec
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (pec *PracticalExperienceCreate) SetNillableStudentID(id *int) *PracticalExperienceCreate {
	if id != nil {
		pec = pec.SetStudentID(*id)
	}
	return pec
}

// SetStudent sets the "student" edge to the Student entity.
func (pec *PracticalExperienceCreate) SetStudent(s *Student) *PracticalExperienceCreate {
	return pec.SetStudentID(s.ID)
}

// Mutation returns the PracticalExperienceMutation object of the builder.
func (pec *PracticalExperienceCreate) Mutation() *PracticalExperienceMutation {
	return pec.mutation
}

// Save creates the PracticalExperience in the database.
func (pec *PracticalExperienceCreate) Save(ctx context.Context) (*PracticalExperience, error) {
	return withHooks[*PracticalExperience, PracticalExperienceMutation](ctx, pec.sqlSave, pec.mutation, pec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pec *PracticalExperienceCreate) SaveX(ctx context.Context) *PracticalExperience {
	v, err := pec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pec *PracticalExperienceCreate) Exec(ctx context.Context) error {
	_, err := pec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pec *PracticalExperienceCreate) ExecX(ctx context.Context) {
	if err := pec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pec *PracticalExperienceCreate) check() error {
	return nil
}

func (pec *PracticalExperienceCreate) sqlSave(ctx context.Context) (*PracticalExperience, error) {
	if err := pec.check(); err != nil {
		return nil, err
	}
	_node, _spec := pec.createSpec()
	if err := sqlgraph.CreateNode(ctx, pec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pec.mutation.id = &_node.ID
	pec.mutation.done = true
	return _node, nil
}

func (pec *PracticalExperienceCreate) createSpec() (*PracticalExperience, *sqlgraph.CreateSpec) {
	var (
		_node = &PracticalExperience{config: pec.config}
		_spec = sqlgraph.NewCreateSpec(practicalexperience.Table, sqlgraph.NewFieldSpec(practicalexperience.FieldID, field.TypeInt))
	)
	if nodes := pec.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   practicalexperience.StudentTable,
			Columns: []string{practicalexperience.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.practical_experience_student = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PracticalExperienceCreateBulk is the builder for creating many PracticalExperience entities in bulk.
type PracticalExperienceCreateBulk struct {
	config
	builders []*PracticalExperienceCreate
}

// Save creates the PracticalExperience entities in the database.
func (pecb *PracticalExperienceCreateBulk) Save(ctx context.Context) ([]*PracticalExperience, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pecb.builders))
	nodes := make([]*PracticalExperience, len(pecb.builders))
	mutators := make([]Mutator, len(pecb.builders))
	for i := range pecb.builders {
		func(i int, root context.Context) {
			builder := pecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PracticalExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pecb *PracticalExperienceCreateBulk) SaveX(ctx context.Context) []*PracticalExperience {
	v, err := pecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pecb *PracticalExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := pecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pecb *PracticalExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := pecb.Exec(ctx); err != nil {
		panic(err)
	}
}
