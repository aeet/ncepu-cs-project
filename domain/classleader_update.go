// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// ClassLeaderUpdate is the builder for updating ClassLeader entities.
type ClassLeaderUpdate struct {
	config
	hooks    []Hook
	mutation *ClassLeaderMutation
}

// Where appends a list predicates to the ClassLeaderUpdate builder.
func (clu *ClassLeaderUpdate) Where(ps ...predicate.ClassLeader) *ClassLeaderUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (clu *ClassLeaderUpdate) SetClassID(id int) *ClassLeaderUpdate {
	clu.mutation.SetClassID(id)
	return clu
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (clu *ClassLeaderUpdate) SetNillableClassID(id *int) *ClassLeaderUpdate {
	if id != nil {
		clu = clu.SetClassID(*id)
	}
	return clu
}

// SetClass sets the "class" edge to the Class entity.
func (clu *ClassLeaderUpdate) SetClass(c *Class) *ClassLeaderUpdate {
	return clu.SetClassID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (clu *ClassLeaderUpdate) SetStudentID(id int) *ClassLeaderUpdate {
	clu.mutation.SetStudentID(id)
	return clu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (clu *ClassLeaderUpdate) SetNillableStudentID(id *int) *ClassLeaderUpdate {
	if id != nil {
		clu = clu.SetStudentID(*id)
	}
	return clu
}

// SetStudent sets the "student" edge to the Student entity.
func (clu *ClassLeaderUpdate) SetStudent(s *Student) *ClassLeaderUpdate {
	return clu.SetStudentID(s.ID)
}

// Mutation returns the ClassLeaderMutation object of the builder.
func (clu *ClassLeaderUpdate) Mutation() *ClassLeaderMutation {
	return clu.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (clu *ClassLeaderUpdate) ClearClass() *ClassLeaderUpdate {
	clu.mutation.ClearClass()
	return clu
}

// ClearStudent clears the "student" edge to the Student entity.
func (clu *ClassLeaderUpdate) ClearStudent() *ClassLeaderUpdate {
	clu.mutation.ClearStudent()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *ClassLeaderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClassLeaderMutation](ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *ClassLeaderUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *ClassLeaderUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *ClassLeaderUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *ClassLeaderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(classleader.Table, classleader.Columns, sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.ClassTable,
			Columns: []string{classleader.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.ClassTable,
			Columns: []string{classleader.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.StudentTable,
			Columns: []string{classleader.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.StudentTable,
			Columns: []string{classleader.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classleader.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// ClassLeaderUpdateOne is the builder for updating a single ClassLeader entity.
type ClassLeaderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassLeaderMutation
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (cluo *ClassLeaderUpdateOne) SetClassID(id int) *ClassLeaderUpdateOne {
	cluo.mutation.SetClassID(id)
	return cluo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (cluo *ClassLeaderUpdateOne) SetNillableClassID(id *int) *ClassLeaderUpdateOne {
	if id != nil {
		cluo = cluo.SetClassID(*id)
	}
	return cluo
}

// SetClass sets the "class" edge to the Class entity.
func (cluo *ClassLeaderUpdateOne) SetClass(c *Class) *ClassLeaderUpdateOne {
	return cluo.SetClassID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cluo *ClassLeaderUpdateOne) SetStudentID(id int) *ClassLeaderUpdateOne {
	cluo.mutation.SetStudentID(id)
	return cluo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cluo *ClassLeaderUpdateOne) SetNillableStudentID(id *int) *ClassLeaderUpdateOne {
	if id != nil {
		cluo = cluo.SetStudentID(*id)
	}
	return cluo
}

// SetStudent sets the "student" edge to the Student entity.
func (cluo *ClassLeaderUpdateOne) SetStudent(s *Student) *ClassLeaderUpdateOne {
	return cluo.SetStudentID(s.ID)
}

// Mutation returns the ClassLeaderMutation object of the builder.
func (cluo *ClassLeaderUpdateOne) Mutation() *ClassLeaderMutation {
	return cluo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (cluo *ClassLeaderUpdateOne) ClearClass() *ClassLeaderUpdateOne {
	cluo.mutation.ClearClass()
	return cluo
}

// ClearStudent clears the "student" edge to the Student entity.
func (cluo *ClassLeaderUpdateOne) ClearStudent() *ClassLeaderUpdateOne {
	cluo.mutation.ClearStudent()
	return cluo
}

// Where appends a list predicates to the ClassLeaderUpdate builder.
func (cluo *ClassLeaderUpdateOne) Where(ps ...predicate.ClassLeader) *ClassLeaderUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *ClassLeaderUpdateOne) Select(field string, fields ...string) *ClassLeaderUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated ClassLeader entity.
func (cluo *ClassLeaderUpdateOne) Save(ctx context.Context) (*ClassLeader, error) {
	return withHooks[*ClassLeader, ClassLeaderMutation](ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *ClassLeaderUpdateOne) SaveX(ctx context.Context) *ClassLeader {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *ClassLeaderUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *ClassLeaderUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *ClassLeaderUpdateOne) sqlSave(ctx context.Context) (_node *ClassLeader, err error) {
	_spec := sqlgraph.NewUpdateSpec(classleader.Table, classleader.Columns, sqlgraph.NewFieldSpec(classleader.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "ClassLeader.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classleader.FieldID)
		for _, f := range fields {
			if !classleader.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != classleader.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cluo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.ClassTable,
			Columns: []string{classleader.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.ClassTable,
			Columns: []string{classleader.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.StudentTable,
			Columns: []string{classleader.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   classleader.StudentTable,
			Columns: []string{classleader.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClassLeader{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classleader.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
