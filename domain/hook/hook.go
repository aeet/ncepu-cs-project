// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/devcui/ncepu-cs-project/domain"
)

// The AuthorizationFunc type is an adapter to allow the use of ordinary
// function as Authorization mutator.
type AuthorizationFunc func(context.Context, *domain.AuthorizationMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f AuthorizationFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.AuthorizationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.AuthorizationMutation", m)
}

// The CampusFunc type is an adapter to allow the use of ordinary
// function as Campus mutator.
type CampusFunc func(context.Context, *domain.CampusMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f CampusFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.CampusMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.CampusMutation", m)
}

// The CertificateFunc type is an adapter to allow the use of ordinary
// function as Certificate mutator.
type CertificateFunc func(context.Context, *domain.CertificateMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f CertificateFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.CertificateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.CertificateMutation", m)
}

// The ClassFunc type is an adapter to allow the use of ordinary
// function as Class mutator.
type ClassFunc func(context.Context, *domain.ClassMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f ClassFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.ClassMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.ClassMutation", m)
}

// The ClassLeaderFunc type is an adapter to allow the use of ordinary
// function as ClassLeader mutator.
type ClassLeaderFunc func(context.Context, *domain.ClassLeaderMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f ClassLeaderFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.ClassLeaderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.ClassLeaderMutation", m)
}

// The DepartmentFunc type is an adapter to allow the use of ordinary
// function as Department mutator.
type DepartmentFunc func(context.Context, *domain.DepartmentMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f DepartmentFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.DepartmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.DepartmentMutation", m)
}

// The EducationLevelFunc type is an adapter to allow the use of ordinary
// function as EducationLevel mutator.
type EducationLevelFunc func(context.Context, *domain.EducationLevelMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f EducationLevelFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.EducationLevelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.EducationLevelMutation", m)
}

// The EnrollmentStatusFunc type is an adapter to allow the use of ordinary
// function as EnrollmentStatus mutator.
type EnrollmentStatusFunc func(context.Context, *domain.EnrollmentStatusMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f EnrollmentStatusFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.EnrollmentStatusMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.EnrollmentStatusMutation", m)
}

// The FamilyInfoFunc type is an adapter to allow the use of ordinary
// function as FamilyInfo mutator.
type FamilyInfoFunc func(context.Context, *domain.FamilyInfoMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f FamilyInfoFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.FamilyInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.FamilyInfoMutation", m)
}

// The MajorFunc type is an adapter to allow the use of ordinary
// function as Major mutator.
type MajorFunc func(context.Context, *domain.MajorMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f MajorFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.MajorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.MajorMutation", m)
}

// The MajorDirectionFunc type is an adapter to allow the use of ordinary
// function as MajorDirection mutator.
type MajorDirectionFunc func(context.Context, *domain.MajorDirectionMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f MajorDirectionFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.MajorDirectionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.MajorDirectionMutation", m)
}

// The PracticalExperienceFunc type is an adapter to allow the use of ordinary
// function as PracticalExperience mutator.
type PracticalExperienceFunc func(context.Context, *domain.PracticalExperienceMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f PracticalExperienceFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.PracticalExperienceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.PracticalExperienceMutation", m)
}

// The ResourceFunc type is an adapter to allow the use of ordinary
// function as Resource mutator.
type ResourceFunc func(context.Context, *domain.ResourceMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f ResourceFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.ResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.ResourceMutation", m)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *domain.RoleMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.RoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.RoleMutation", m)
}

// The StudentFunc type is an adapter to allow the use of ordinary
// function as Student mutator.
type StudentFunc func(context.Context, *domain.StudentMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f StudentFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.StudentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.StudentMutation", m)
}

// The TutorFunc type is an adapter to allow the use of ordinary
// function as Tutor mutator.
type TutorFunc func(context.Context, *domain.TutorMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f TutorFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.TutorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.TutorMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *domain.UserMutation) (domain.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m domain.Mutation) (domain.Value, error) {
	if mv, ok := m.(*domain.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *domain.UserMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, domain.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m domain.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m domain.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m domain.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op domain.Op) Condition {
	return func(_ context.Context, m domain.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m domain.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m domain.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m domain.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk domain.Hook, cond Condition) domain.Hook {
	return func(next domain.Mutator) domain.Mutator {
		return domain.MutateFunc(func(ctx context.Context, m domain.Mutation) (domain.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, domain.Delete|domain.Create)
func On(hk domain.Hook, op domain.Op) domain.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, domain.Update|domain.UpdateOne)
func Unless(hk domain.Hook, op domain.Op) domain.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) domain.Hook {
	return func(domain.Mutator) domain.Mutator {
		return domain.MutateFunc(func(context.Context, domain.Mutation) (domain.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []domain.Hook {
//		return []domain.Hook{
//			Reject(domain.Delete|domain.Update),
//		}
//	}
func Reject(op domain.Op) domain.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []domain.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...domain.Hook) Chain {
	return Chain{append([]domain.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() domain.Hook {
	return func(mutator domain.Mutator) domain.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...domain.Hook) Chain {
	newHooks := make([]domain.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
