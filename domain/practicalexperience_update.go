// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/practicalexperience"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// PracticalExperienceUpdate is the builder for updating PracticalExperience entities.
type PracticalExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *PracticalExperienceMutation
}

// Where appends a list predicates to the PracticalExperienceUpdate builder.
func (peu *PracticalExperienceUpdate) Where(ps ...predicate.PracticalExperience) *PracticalExperienceUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetName sets the "name" field.
func (peu *PracticalExperienceUpdate) SetName(s string) *PracticalExperienceUpdate {
	peu.mutation.SetName(s)
	return peu
}

// SetUnit sets the "unit" field.
func (peu *PracticalExperienceUpdate) SetUnit(s string) *PracticalExperienceUpdate {
	peu.mutation.SetUnit(s)
	return peu
}

// SetStartTime sets the "start_time" field.
func (peu *PracticalExperienceUpdate) SetStartTime(s string) *PracticalExperienceUpdate {
	peu.mutation.SetStartTime(s)
	return peu
}

// SetEndTime sets the "end_time" field.
func (peu *PracticalExperienceUpdate) SetEndTime(s string) *PracticalExperienceUpdate {
	peu.mutation.SetEndTime(s)
	return peu
}

// SetDescribe sets the "describe" field.
func (peu *PracticalExperienceUpdate) SetDescribe(s string) *PracticalExperienceUpdate {
	peu.mutation.SetDescribe(s)
	return peu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (peu *PracticalExperienceUpdate) SetStudentID(id int) *PracticalExperienceUpdate {
	peu.mutation.SetStudentID(id)
	return peu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (peu *PracticalExperienceUpdate) SetNillableStudentID(id *int) *PracticalExperienceUpdate {
	if id != nil {
		peu = peu.SetStudentID(*id)
	}
	return peu
}

// SetStudent sets the "student" edge to the Student entity.
func (peu *PracticalExperienceUpdate) SetStudent(s *Student) *PracticalExperienceUpdate {
	return peu.SetStudentID(s.ID)
}

// Mutation returns the PracticalExperienceMutation object of the builder.
func (peu *PracticalExperienceUpdate) Mutation() *PracticalExperienceMutation {
	return peu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (peu *PracticalExperienceUpdate) ClearStudent() *PracticalExperienceUpdate {
	peu.mutation.ClearStudent()
	return peu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *PracticalExperienceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PracticalExperienceMutation](ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *PracticalExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *PracticalExperienceUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *PracticalExperienceUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peu *PracticalExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(practicalexperience.Table, practicalexperience.Columns, sqlgraph.NewFieldSpec(practicalexperience.FieldID, field.TypeInt))
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.Name(); ok {
		_spec.SetField(practicalexperience.FieldName, field.TypeString, value)
	}
	if value, ok := peu.mutation.Unit(); ok {
		_spec.SetField(practicalexperience.FieldUnit, field.TypeString, value)
	}
	if value, ok := peu.mutation.StartTime(); ok {
		_spec.SetField(practicalexperience.FieldStartTime, field.TypeString, value)
	}
	if value, ok := peu.mutation.EndTime(); ok {
		_spec.SetField(practicalexperience.FieldEndTime, field.TypeString, value)
	}
	if value, ok := peu.mutation.Describe(); ok {
		_spec.SetField(practicalexperience.FieldDescribe, field.TypeString, value)
	}
	if peu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   practicalexperience.StudentTable,
			Columns: []string{practicalexperience.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   practicalexperience.StudentTable,
			Columns: []string{practicalexperience.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{practicalexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// PracticalExperienceUpdateOne is the builder for updating a single PracticalExperience entity.
type PracticalExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PracticalExperienceMutation
}

// SetName sets the "name" field.
func (peuo *PracticalExperienceUpdateOne) SetName(s string) *PracticalExperienceUpdateOne {
	peuo.mutation.SetName(s)
	return peuo
}

// SetUnit sets the "unit" field.
func (peuo *PracticalExperienceUpdateOne) SetUnit(s string) *PracticalExperienceUpdateOne {
	peuo.mutation.SetUnit(s)
	return peuo
}

// SetStartTime sets the "start_time" field.
func (peuo *PracticalExperienceUpdateOne) SetStartTime(s string) *PracticalExperienceUpdateOne {
	peuo.mutation.SetStartTime(s)
	return peuo
}

// SetEndTime sets the "end_time" field.
func (peuo *PracticalExperienceUpdateOne) SetEndTime(s string) *PracticalExperienceUpdateOne {
	peuo.mutation.SetEndTime(s)
	return peuo
}

// SetDescribe sets the "describe" field.
func (peuo *PracticalExperienceUpdateOne) SetDescribe(s string) *PracticalExperienceUpdateOne {
	peuo.mutation.SetDescribe(s)
	return peuo
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (peuo *PracticalExperienceUpdateOne) SetStudentID(id int) *PracticalExperienceUpdateOne {
	peuo.mutation.SetStudentID(id)
	return peuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (peuo *PracticalExperienceUpdateOne) SetNillableStudentID(id *int) *PracticalExperienceUpdateOne {
	if id != nil {
		peuo = peuo.SetStudentID(*id)
	}
	return peuo
}

// SetStudent sets the "student" edge to the Student entity.
func (peuo *PracticalExperienceUpdateOne) SetStudent(s *Student) *PracticalExperienceUpdateOne {
	return peuo.SetStudentID(s.ID)
}

// Mutation returns the PracticalExperienceMutation object of the builder.
func (peuo *PracticalExperienceUpdateOne) Mutation() *PracticalExperienceMutation {
	return peuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (peuo *PracticalExperienceUpdateOne) ClearStudent() *PracticalExperienceUpdateOne {
	peuo.mutation.ClearStudent()
	return peuo
}

// Where appends a list predicates to the PracticalExperienceUpdate builder.
func (peuo *PracticalExperienceUpdateOne) Where(ps ...predicate.PracticalExperience) *PracticalExperienceUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *PracticalExperienceUpdateOne) Select(field string, fields ...string) *PracticalExperienceUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated PracticalExperience entity.
func (peuo *PracticalExperienceUpdateOne) Save(ctx context.Context) (*PracticalExperience, error) {
	return withHooks[*PracticalExperience, PracticalExperienceMutation](ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *PracticalExperienceUpdateOne) SaveX(ctx context.Context) *PracticalExperience {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *PracticalExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *PracticalExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peuo *PracticalExperienceUpdateOne) sqlSave(ctx context.Context) (_node *PracticalExperience, err error) {
	_spec := sqlgraph.NewUpdateSpec(practicalexperience.Table, practicalexperience.Columns, sqlgraph.NewFieldSpec(practicalexperience.FieldID, field.TypeInt))
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "PracticalExperience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, practicalexperience.FieldID)
		for _, f := range fields {
			if !practicalexperience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != practicalexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.Name(); ok {
		_spec.SetField(practicalexperience.FieldName, field.TypeString, value)
	}
	if value, ok := peuo.mutation.Unit(); ok {
		_spec.SetField(practicalexperience.FieldUnit, field.TypeString, value)
	}
	if value, ok := peuo.mutation.StartTime(); ok {
		_spec.SetField(practicalexperience.FieldStartTime, field.TypeString, value)
	}
	if value, ok := peuo.mutation.EndTime(); ok {
		_spec.SetField(practicalexperience.FieldEndTime, field.TypeString, value)
	}
	if value, ok := peuo.mutation.Describe(); ok {
		_spec.SetField(practicalexperience.FieldDescribe, field.TypeString, value)
	}
	if peuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   practicalexperience.StudentTable,
			Columns: []string{practicalexperience.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   practicalexperience.StudentTable,
			Columns: []string{practicalexperience.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PracticalExperience{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{practicalexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}
