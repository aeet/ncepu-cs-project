// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// MajorUpdate is the builder for updating Major entities.
type MajorUpdate struct {
	config
	hooks    []Hook
	mutation *MajorMutation
}

// Where appends a list predicates to the MajorUpdate builder.
func (mu *MajorUpdate) Where(ps ...predicate.Major) *MajorUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MajorUpdate) SetName(s string) *MajorUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetCode sets the "code" field.
func (mu *MajorUpdate) SetCode(s string) *MajorUpdate {
	mu.mutation.SetCode(s)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MajorUpdate) SetDescription(s string) *MajorUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (mu *MajorUpdate) SetDepartmentID(id int) *MajorUpdate {
	mu.mutation.SetDepartmentID(id)
	return mu
}

// SetNillableDepartmentID sets the "department" edge to the Department entity by ID if the given value is not nil.
func (mu *MajorUpdate) SetNillableDepartmentID(id *int) *MajorUpdate {
	if id != nil {
		mu = mu.SetDepartmentID(*id)
	}
	return mu
}

// SetDepartment sets the "department" edge to the Department entity.
func (mu *MajorUpdate) SetDepartment(d *Department) *MajorUpdate {
	return mu.SetDepartmentID(d.ID)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (mu *MajorUpdate) AddStudentIDs(ids ...int) *MajorUpdate {
	mu.mutation.AddStudentIDs(ids...)
	return mu
}

// AddStudent adds the "student" edges to the Student entity.
func (mu *MajorUpdate) AddStudent(s ...*Student) *MajorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.AddStudentIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (mu *MajorUpdate) AddClasIDs(ids ...int) *MajorUpdate {
	mu.mutation.AddClasIDs(ids...)
	return mu
}

// AddClass adds the "class" edges to the Class entity.
func (mu *MajorUpdate) AddClass(c ...*Class) *MajorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddClasIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (mu *MajorUpdate) Mutation() *MajorMutation {
	return mu.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (mu *MajorUpdate) ClearDepartment() *MajorUpdate {
	mu.mutation.ClearDepartment()
	return mu
}

// ClearStudent clears all "student" edges to the Student entity.
func (mu *MajorUpdate) ClearStudent() *MajorUpdate {
	mu.mutation.ClearStudent()
	return mu
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (mu *MajorUpdate) RemoveStudentIDs(ids ...int) *MajorUpdate {
	mu.mutation.RemoveStudentIDs(ids...)
	return mu
}

// RemoveStudent removes "student" edges to Student entities.
func (mu *MajorUpdate) RemoveStudent(s ...*Student) *MajorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.RemoveStudentIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (mu *MajorUpdate) ClearClass() *MajorUpdate {
	mu.mutation.ClearClass()
	return mu
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (mu *MajorUpdate) RemoveClasIDs(ids ...int) *MajorUpdate {
	mu.mutation.RemoveClasIDs(ids...)
	return mu
}

// RemoveClass removes "class" edges to Class entities.
func (mu *MajorUpdate) RemoveClass(c ...*Class) *MajorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveClasIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MajorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MajorMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MajorUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MajorUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MajorUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MajorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(major.Table, major.Columns, sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(major.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Code(); ok {
		_spec.SetField(major.FieldCode, field.TypeString, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(major.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.StudentTable,
			Columns: []string{major.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedStudentIDs(); len(nodes) > 0 && !mu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.StudentTable,
			Columns: []string{major.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.StudentTable,
			Columns: []string{major.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.ClassTable,
			Columns: []string{major.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedClassIDs(); len(nodes) > 0 && !mu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.ClassTable,
			Columns: []string{major.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.ClassTable,
			Columns: []string{major.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{major.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MajorUpdateOne is the builder for updating a single Major entity.
type MajorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MajorMutation
}

// SetName sets the "name" field.
func (muo *MajorUpdateOne) SetName(s string) *MajorUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetCode sets the "code" field.
func (muo *MajorUpdateOne) SetCode(s string) *MajorUpdateOne {
	muo.mutation.SetCode(s)
	return muo
}

// SetDescription sets the "description" field.
func (muo *MajorUpdateOne) SetDescription(s string) *MajorUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (muo *MajorUpdateOne) SetDepartmentID(id int) *MajorUpdateOne {
	muo.mutation.SetDepartmentID(id)
	return muo
}

// SetNillableDepartmentID sets the "department" edge to the Department entity by ID if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableDepartmentID(id *int) *MajorUpdateOne {
	if id != nil {
		muo = muo.SetDepartmentID(*id)
	}
	return muo
}

// SetDepartment sets the "department" edge to the Department entity.
func (muo *MajorUpdateOne) SetDepartment(d *Department) *MajorUpdateOne {
	return muo.SetDepartmentID(d.ID)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (muo *MajorUpdateOne) AddStudentIDs(ids ...int) *MajorUpdateOne {
	muo.mutation.AddStudentIDs(ids...)
	return muo
}

// AddStudent adds the "student" edges to the Student entity.
func (muo *MajorUpdateOne) AddStudent(s ...*Student) *MajorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.AddStudentIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (muo *MajorUpdateOne) AddClasIDs(ids ...int) *MajorUpdateOne {
	muo.mutation.AddClasIDs(ids...)
	return muo
}

// AddClass adds the "class" edges to the Class entity.
func (muo *MajorUpdateOne) AddClass(c ...*Class) *MajorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddClasIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (muo *MajorUpdateOne) Mutation() *MajorMutation {
	return muo.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (muo *MajorUpdateOne) ClearDepartment() *MajorUpdateOne {
	muo.mutation.ClearDepartment()
	return muo
}

// ClearStudent clears all "student" edges to the Student entity.
func (muo *MajorUpdateOne) ClearStudent() *MajorUpdateOne {
	muo.mutation.ClearStudent()
	return muo
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (muo *MajorUpdateOne) RemoveStudentIDs(ids ...int) *MajorUpdateOne {
	muo.mutation.RemoveStudentIDs(ids...)
	return muo
}

// RemoveStudent removes "student" edges to Student entities.
func (muo *MajorUpdateOne) RemoveStudent(s ...*Student) *MajorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.RemoveStudentIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (muo *MajorUpdateOne) ClearClass() *MajorUpdateOne {
	muo.mutation.ClearClass()
	return muo
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (muo *MajorUpdateOne) RemoveClasIDs(ids ...int) *MajorUpdateOne {
	muo.mutation.RemoveClasIDs(ids...)
	return muo
}

// RemoveClass removes "class" edges to Class entities.
func (muo *MajorUpdateOne) RemoveClass(c ...*Class) *MajorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveClasIDs(ids...)
}

// Where appends a list predicates to the MajorUpdate builder.
func (muo *MajorUpdateOne) Where(ps ...predicate.Major) *MajorUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MajorUpdateOne) Select(field string, fields ...string) *MajorUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Major entity.
func (muo *MajorUpdateOne) Save(ctx context.Context) (*Major, error) {
	return withHooks[*Major, MajorMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MajorUpdateOne) SaveX(ctx context.Context) *Major {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MajorUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MajorUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MajorUpdateOne) sqlSave(ctx context.Context) (_node *Major, err error) {
	_spec := sqlgraph.NewUpdateSpec(major.Table, major.Columns, sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "Major.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, major.FieldID)
		for _, f := range fields {
			if !major.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != major.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(major.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Code(); ok {
		_spec.SetField(major.FieldCode, field.TypeString, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(major.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.StudentTable,
			Columns: []string{major.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedStudentIDs(); len(nodes) > 0 && !muo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.StudentTable,
			Columns: []string{major.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.StudentTable,
			Columns: []string{major.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.ClassTable,
			Columns: []string{major.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedClassIDs(); len(nodes) > 0 && !muo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.ClassTable,
			Columns: []string{major.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   major.ClassTable,
			Columns: []string{major.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Major{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{major.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
