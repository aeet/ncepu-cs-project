// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/practicalexperience"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// PracticalExperience is the model entity for the PracticalExperience schema.
type PracticalExperience struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PracticalExperienceQuery when eager-loading is set.
	Edges                        PracticalExperienceEdges `json:"edges"`
	practical_experience_student *int
}

// PracticalExperienceEdges holds the relations/edges for other nodes in the graph.
type PracticalExperienceEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PracticalExperienceEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PracticalExperience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case practicalexperience.FieldID:
			values[i] = new(sql.NullInt64)
		case practicalexperience.ForeignKeys[0]: // practical_experience_student
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PracticalExperience", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PracticalExperience fields.
func (pe *PracticalExperience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case practicalexperience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case practicalexperience.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field practical_experience_student", value)
			} else if value.Valid {
				pe.practical_experience_student = new(int)
				*pe.practical_experience_student = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the PracticalExperience entity.
func (pe *PracticalExperience) QueryStudent() *StudentQuery {
	return NewPracticalExperienceClient(pe.config).QueryStudent(pe)
}

// Update returns a builder for updating this PracticalExperience.
// Note that you need to call PracticalExperience.Unwrap() before calling this method if this PracticalExperience
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PracticalExperience) Update() *PracticalExperienceUpdateOne {
	return NewPracticalExperienceClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PracticalExperience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PracticalExperience) Unwrap() *PracticalExperience {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("domain: PracticalExperience is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PracticalExperience) String() string {
	var builder strings.Builder
	builder.WriteString("PracticalExperience(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PracticalExperiences is a parsable slice of PracticalExperience.
type PracticalExperiences []*PracticalExperience
