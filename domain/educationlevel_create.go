// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/educationlevel"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// EducationLevelCreate is the builder for creating a EducationLevel entity.
type EducationLevelCreate struct {
	config
	mutation *EducationLevelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (elc *EducationLevelCreate) SetName(s string) *EducationLevelCreate {
	elc.mutation.SetName(s)
	return elc
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (elc *EducationLevelCreate) SetStudentID(id int) *EducationLevelCreate {
	elc.mutation.SetStudentID(id)
	return elc
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (elc *EducationLevelCreate) SetNillableStudentID(id *int) *EducationLevelCreate {
	if id != nil {
		elc = elc.SetStudentID(*id)
	}
	return elc
}

// SetStudent sets the "student" edge to the Student entity.
func (elc *EducationLevelCreate) SetStudent(s *Student) *EducationLevelCreate {
	return elc.SetStudentID(s.ID)
}

// Mutation returns the EducationLevelMutation object of the builder.
func (elc *EducationLevelCreate) Mutation() *EducationLevelMutation {
	return elc.mutation
}

// Save creates the EducationLevel in the database.
func (elc *EducationLevelCreate) Save(ctx context.Context) (*EducationLevel, error) {
	return withHooks[*EducationLevel, EducationLevelMutation](ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EducationLevelCreate) SaveX(ctx context.Context) *EducationLevel {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EducationLevelCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EducationLevelCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EducationLevelCreate) check() error {
	if _, ok := elc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`domain: missing required field "EducationLevel.name"`)}
	}
	return nil
}

func (elc *EducationLevelCreate) sqlSave(ctx context.Context) (*EducationLevel, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EducationLevelCreate) createSpec() (*EducationLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &EducationLevel{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(educationlevel.Table, sqlgraph.NewFieldSpec(educationlevel.FieldID, field.TypeInt))
	)
	if value, ok := elc.mutation.Name(); ok {
		_spec.SetField(educationlevel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := elc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   educationlevel.StudentTable,
			Columns: []string{educationlevel.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.education_level_student = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EducationLevelCreateBulk is the builder for creating many EducationLevel entities in bulk.
type EducationLevelCreateBulk struct {
	config
	builders []*EducationLevelCreate
}

// Save creates the EducationLevel entities in the database.
func (elcb *EducationLevelCreateBulk) Save(ctx context.Context) ([]*EducationLevel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EducationLevel, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EducationLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EducationLevelCreateBulk) SaveX(ctx context.Context) []*EducationLevel {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EducationLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EducationLevelCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
