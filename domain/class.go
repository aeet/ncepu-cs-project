// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/campus"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/classleader"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
	"github.com/devcui/ncepu-cs-project/domain/majordirection"
	"github.com/devcui/ncepu-cs-project/domain/tutor"
)

// Class is the model entity for the Class schema.
type Class struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassQuery when eager-loading is set.
	Edges                 ClassEdges `json:"edges"`
	campus_class          *int
	class_major           *int
	class_department      *int
	class_leader_class    *int
	major_direction_class *int
	tutor_class           *int
}

// ClassEdges holds the relations/edges for other nodes in the graph.
type ClassEdges struct {
	// Major holds the value of the major edge.
	Major *Major `json:"major,omitempty"`
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Campus holds the value of the campus edge.
	Campus *Campus `json:"campus,omitempty"`
	// Student holds the value of the student edge.
	Student []*Student `json:"student,omitempty"`
	// ClassLeader holds the value of the class_leader edge.
	ClassLeader *ClassLeader `json:"class_leader,omitempty"`
	// Tutor holds the value of the tutor edge.
	Tutor *Tutor `json:"tutor,omitempty"`
	// MajorDirection holds the value of the major_direction edge.
	MajorDirection *MajorDirection `json:"major_direction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// MajorOrErr returns the Major value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) MajorOrErr() (*Major, error) {
	if e.loadedTypes[0] {
		if e.Major == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: major.Label}
		}
		return e.Major, nil
	}
	return nil, &NotLoadedError{edge: "major"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Department == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// CampusOrErr returns the Campus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) CampusOrErr() (*Campus, error) {
	if e.loadedTypes[2] {
		if e.Campus == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: campus.Label}
		}
		return e.Campus, nil
	}
	return nil, &NotLoadedError{edge: "campus"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) StudentOrErr() ([]*Student, error) {
	if e.loadedTypes[3] {
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// ClassLeaderOrErr returns the ClassLeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) ClassLeaderOrErr() (*ClassLeader, error) {
	if e.loadedTypes[4] {
		if e.ClassLeader == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: classleader.Label}
		}
		return e.ClassLeader, nil
	}
	return nil, &NotLoadedError{edge: "class_leader"}
}

// TutorOrErr returns the Tutor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) TutorOrErr() (*Tutor, error) {
	if e.loadedTypes[5] {
		if e.Tutor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tutor.Label}
		}
		return e.Tutor, nil
	}
	return nil, &NotLoadedError{edge: "tutor"}
}

// MajorDirectionOrErr returns the MajorDirection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) MajorDirectionOrErr() (*MajorDirection, error) {
	if e.loadedTypes[6] {
		if e.MajorDirection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: majordirection.Label}
		}
		return e.MajorDirection, nil
	}
	return nil, &NotLoadedError{edge: "major_direction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[0]: // campus_class
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[1]: // class_major
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[2]: // class_department
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[3]: // class_leader_class
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[4]: // major_direction_class
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[5]: // tutor_class
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Class", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class fields.
func (c *Class) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case class.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field campus_class", value)
			} else if value.Valid {
				c.campus_class = new(int)
				*c.campus_class = int(value.Int64)
			}
		case class.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_major", value)
			} else if value.Valid {
				c.class_major = new(int)
				*c.class_major = int(value.Int64)
			}
		case class.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_department", value)
			} else if value.Valid {
				c.class_department = new(int)
				*c.class_department = int(value.Int64)
			}
		case class.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_leader_class", value)
			} else if value.Valid {
				c.class_leader_class = new(int)
				*c.class_leader_class = int(value.Int64)
			}
		case class.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field major_direction_class", value)
			} else if value.Valid {
				c.major_direction_class = new(int)
				*c.major_direction_class = int(value.Int64)
			}
		case class.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tutor_class", value)
			} else if value.Valid {
				c.tutor_class = new(int)
				*c.tutor_class = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMajor queries the "major" edge of the Class entity.
func (c *Class) QueryMajor() *MajorQuery {
	return NewClassClient(c.config).QueryMajor(c)
}

// QueryDepartment queries the "department" edge of the Class entity.
func (c *Class) QueryDepartment() *DepartmentQuery {
	return NewClassClient(c.config).QueryDepartment(c)
}

// QueryCampus queries the "campus" edge of the Class entity.
func (c *Class) QueryCampus() *CampusQuery {
	return NewClassClient(c.config).QueryCampus(c)
}

// QueryStudent queries the "student" edge of the Class entity.
func (c *Class) QueryStudent() *StudentQuery {
	return NewClassClient(c.config).QueryStudent(c)
}

// QueryClassLeader queries the "class_leader" edge of the Class entity.
func (c *Class) QueryClassLeader() *ClassLeaderQuery {
	return NewClassClient(c.config).QueryClassLeader(c)
}

// QueryTutor queries the "tutor" edge of the Class entity.
func (c *Class) QueryTutor() *TutorQuery {
	return NewClassClient(c.config).QueryTutor(c)
}

// QueryMajorDirection queries the "major_direction" edge of the Class entity.
func (c *Class) QueryMajorDirection() *MajorDirectionQuery {
	return NewClassClient(c.config).QueryMajorDirection(c)
}

// Update returns a builder for updating this Class.
// Note that you need to call Class.Unwrap() before calling this method if this Class
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Class) Update() *ClassUpdateOne {
	return NewClassClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Class entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Class) Unwrap() *Class {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("domain: Class is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Class) String() string {
	var builder strings.Builder
	builder.WriteString("Class(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Classes is a parsable slice of Class.
type Classes []*Class
