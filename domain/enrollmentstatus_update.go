// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/enrollmentstatus"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// EnrollmentStatusUpdate is the builder for updating EnrollmentStatus entities.
type EnrollmentStatusUpdate struct {
	config
	hooks    []Hook
	mutation *EnrollmentStatusMutation
}

// Where appends a list predicates to the EnrollmentStatusUpdate builder.
func (esu *EnrollmentStatusUpdate) Where(ps ...predicate.EnrollmentStatus) *EnrollmentStatusUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (esu *EnrollmentStatusUpdate) SetStudentID(id int) *EnrollmentStatusUpdate {
	esu.mutation.SetStudentID(id)
	return esu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (esu *EnrollmentStatusUpdate) SetNillableStudentID(id *int) *EnrollmentStatusUpdate {
	if id != nil {
		esu = esu.SetStudentID(*id)
	}
	return esu
}

// SetStudent sets the "student" edge to the Student entity.
func (esu *EnrollmentStatusUpdate) SetStudent(s *Student) *EnrollmentStatusUpdate {
	return esu.SetStudentID(s.ID)
}

// Mutation returns the EnrollmentStatusMutation object of the builder.
func (esu *EnrollmentStatusUpdate) Mutation() *EnrollmentStatusMutation {
	return esu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (esu *EnrollmentStatusUpdate) ClearStudent() *EnrollmentStatusUpdate {
	esu.mutation.ClearStudent()
	return esu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EnrollmentStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EnrollmentStatusMutation](ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EnrollmentStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EnrollmentStatusUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EnrollmentStatusUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esu *EnrollmentStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enrollmentstatus.Table, enrollmentstatus.Columns, sqlgraph.NewFieldSpec(enrollmentstatus.FieldID, field.TypeInt))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if esu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enrollmentstatus.StudentTable,
			Columns: []string{enrollmentstatus.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enrollmentstatus.StudentTable,
			Columns: []string{enrollmentstatus.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollmentstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// EnrollmentStatusUpdateOne is the builder for updating a single EnrollmentStatus entity.
type EnrollmentStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnrollmentStatusMutation
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (esuo *EnrollmentStatusUpdateOne) SetStudentID(id int) *EnrollmentStatusUpdateOne {
	esuo.mutation.SetStudentID(id)
	return esuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (esuo *EnrollmentStatusUpdateOne) SetNillableStudentID(id *int) *EnrollmentStatusUpdateOne {
	if id != nil {
		esuo = esuo.SetStudentID(*id)
	}
	return esuo
}

// SetStudent sets the "student" edge to the Student entity.
func (esuo *EnrollmentStatusUpdateOne) SetStudent(s *Student) *EnrollmentStatusUpdateOne {
	return esuo.SetStudentID(s.ID)
}

// Mutation returns the EnrollmentStatusMutation object of the builder.
func (esuo *EnrollmentStatusUpdateOne) Mutation() *EnrollmentStatusMutation {
	return esuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (esuo *EnrollmentStatusUpdateOne) ClearStudent() *EnrollmentStatusUpdateOne {
	esuo.mutation.ClearStudent()
	return esuo
}

// Where appends a list predicates to the EnrollmentStatusUpdate builder.
func (esuo *EnrollmentStatusUpdateOne) Where(ps ...predicate.EnrollmentStatus) *EnrollmentStatusUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EnrollmentStatusUpdateOne) Select(field string, fields ...string) *EnrollmentStatusUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EnrollmentStatus entity.
func (esuo *EnrollmentStatusUpdateOne) Save(ctx context.Context) (*EnrollmentStatus, error) {
	return withHooks[*EnrollmentStatus, EnrollmentStatusMutation](ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EnrollmentStatusUpdateOne) SaveX(ctx context.Context) *EnrollmentStatus {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EnrollmentStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EnrollmentStatusUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esuo *EnrollmentStatusUpdateOne) sqlSave(ctx context.Context) (_node *EnrollmentStatus, err error) {
	_spec := sqlgraph.NewUpdateSpec(enrollmentstatus.Table, enrollmentstatus.Columns, sqlgraph.NewFieldSpec(enrollmentstatus.FieldID, field.TypeInt))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "EnrollmentStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enrollmentstatus.FieldID)
		for _, f := range fields {
			if !enrollmentstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != enrollmentstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if esuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enrollmentstatus.StudentTable,
			Columns: []string{enrollmentstatus.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enrollmentstatus.StudentTable,
			Columns: []string{enrollmentstatus.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnrollmentStatus{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollmentstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
