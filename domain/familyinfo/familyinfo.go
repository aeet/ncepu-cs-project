// Code generated by ent, DO NOT EDIT.

package familyinfo

const (
	// Label holds the string label denoting the familyinfo type in the database.
	Label = "family_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRelationship holds the string denoting the relationship field in the database.
	FieldRelationship = "relationship"
	// FieldIDCard holds the string denoting the id_card field in the database.
	FieldIDCard = "id_card"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldOccupation holds the string denoting the occupation field in the database.
	FieldOccupation = "occupation"
	// FieldPost holds the string denoting the post field in the database.
	FieldPost = "post"
	// FieldWorkUnit holds the string denoting the work_unit field in the database.
	FieldWorkUnit = "work_unit"
	// FieldContactNumber holds the string denoting the contact_number field in the database.
	FieldContactNumber = "contact_number"
	// FieldHealth holds the string denoting the health field in the database.
	FieldHealth = "health"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// Table holds the table name of the familyinfo in the database.
	Table = "family_infos"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "family_infos"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "family_info_student"
)

// Columns holds all SQL columns for familyinfo fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRelationship,
	FieldIDCard,
	FieldAge,
	FieldOccupation,
	FieldPost,
	FieldWorkUnit,
	FieldContactNumber,
	FieldHealth,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "family_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"family_info_student",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
