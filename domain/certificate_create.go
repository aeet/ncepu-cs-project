// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/certificate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// CertificateCreate is the builder for creating a Certificate entity.
type CertificateCreate struct {
	config
	mutation *CertificateMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CertificateCreate) SetName(s string) *CertificateCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *CertificateCreate) SetCode(s string) *CertificateCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CertificateCreate) SetDescription(s string) *CertificateCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetDepartment sets the "department" field.
func (cc *CertificateCreate) SetDepartment(s string) *CertificateCreate {
	cc.mutation.SetDepartment(s)
	return cc
}

// SetIssueDate sets the "issue_date" field.
func (cc *CertificateCreate) SetIssueDate(t time.Time) *CertificateCreate {
	cc.mutation.SetIssueDate(t)
	return cc
}

// SetCertificateType sets the "certificate_type" field.
func (cc *CertificateCreate) SetCertificateType(s string) *CertificateCreate {
	cc.mutation.SetCertificateType(s)
	return cc
}

// SetCertificateLevel sets the "certificate_level" field.
func (cc *CertificateCreate) SetCertificateLevel(s string) *CertificateCreate {
	cc.mutation.SetCertificateLevel(s)
	return cc
}

// SetCertificateType2 sets the "certificate_type2" field.
func (cc *CertificateCreate) SetCertificateType2(s string) *CertificateCreate {
	cc.mutation.SetCertificateType2(s)
	return cc
}

// SetAwardCategory sets the "award_category" field.
func (cc *CertificateCreate) SetAwardCategory(s string) *CertificateCreate {
	cc.mutation.SetAwardCategory(s)
	return cc
}

// SetCertificateImage sets the "certificate_image" field.
func (cc *CertificateCreate) SetCertificateImage(b []byte) *CertificateCreate {
	cc.mutation.SetCertificateImage(b)
	return cc
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cc *CertificateCreate) SetStudentID(id int) *CertificateCreate {
	cc.mutation.SetStudentID(id)
	return cc
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cc *CertificateCreate) SetNillableStudentID(id *int) *CertificateCreate {
	if id != nil {
		cc = cc.SetStudentID(*id)
	}
	return cc
}

// SetStudent sets the "student" edge to the Student entity.
func (cc *CertificateCreate) SetStudent(s *Student) *CertificateCreate {
	return cc.SetStudentID(s.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cc *CertificateCreate) Mutation() *CertificateMutation {
	return cc.mutation
}

// Save creates the Certificate in the database.
func (cc *CertificateCreate) Save(ctx context.Context) (*Certificate, error) {
	return withHooks[*Certificate, CertificateMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificateCreate) SaveX(ctx context.Context) *Certificate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificateCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`domain: missing required field "Certificate.name"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`domain: missing required field "Certificate.code"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`domain: missing required field "Certificate.description"`)}
	}
	if _, ok := cc.mutation.Department(); !ok {
		return &ValidationError{Name: "department", err: errors.New(`domain: missing required field "Certificate.department"`)}
	}
	if _, ok := cc.mutation.IssueDate(); !ok {
		return &ValidationError{Name: "issue_date", err: errors.New(`domain: missing required field "Certificate.issue_date"`)}
	}
	if _, ok := cc.mutation.CertificateType(); !ok {
		return &ValidationError{Name: "certificate_type", err: errors.New(`domain: missing required field "Certificate.certificate_type"`)}
	}
	if _, ok := cc.mutation.CertificateLevel(); !ok {
		return &ValidationError{Name: "certificate_level", err: errors.New(`domain: missing required field "Certificate.certificate_level"`)}
	}
	if _, ok := cc.mutation.CertificateType2(); !ok {
		return &ValidationError{Name: "certificate_type2", err: errors.New(`domain: missing required field "Certificate.certificate_type2"`)}
	}
	if _, ok := cc.mutation.AwardCategory(); !ok {
		return &ValidationError{Name: "award_category", err: errors.New(`domain: missing required field "Certificate.award_category"`)}
	}
	if _, ok := cc.mutation.CertificateImage(); !ok {
		return &ValidationError{Name: "certificate_image", err: errors.New(`domain: missing required field "Certificate.certificate_image"`)}
	}
	return nil
}

func (cc *CertificateCreate) sqlSave(ctx context.Context) (*Certificate, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificateCreate) createSpec() (*Certificate, *sqlgraph.CreateSpec) {
	var (
		_node = &Certificate{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certificate.Table, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(certificate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(certificate.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(certificate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Department(); ok {
		_spec.SetField(certificate.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := cc.mutation.IssueDate(); ok {
		_spec.SetField(certificate.FieldIssueDate, field.TypeTime, value)
		_node.IssueDate = value
	}
	if value, ok := cc.mutation.CertificateType(); ok {
		_spec.SetField(certificate.FieldCertificateType, field.TypeString, value)
		_node.CertificateType = value
	}
	if value, ok := cc.mutation.CertificateLevel(); ok {
		_spec.SetField(certificate.FieldCertificateLevel, field.TypeString, value)
		_node.CertificateLevel = value
	}
	if value, ok := cc.mutation.CertificateType2(); ok {
		_spec.SetField(certificate.FieldCertificateType2, field.TypeString, value)
		_node.CertificateType2 = value
	}
	if value, ok := cc.mutation.AwardCategory(); ok {
		_spec.SetField(certificate.FieldAwardCategory, field.TypeString, value)
		_node.AwardCategory = value
	}
	if value, ok := cc.mutation.CertificateImage(); ok {
		_spec.SetField(certificate.FieldCertificateImage, field.TypeBytes, value)
		_node.CertificateImage = value
	}
	if nodes := cc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certificate.StudentTable,
			Columns: []string{certificate.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.certificate_student = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificateCreateBulk is the builder for creating many Certificate entities in bulk.
type CertificateCreateBulk struct {
	config
	builders []*CertificateCreate
}

// Save creates the Certificate entities in the database.
func (ccb *CertificateCreateBulk) Save(ctx context.Context) ([]*Certificate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certificate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificateCreateBulk) SaveX(ctx context.Context) []*Certificate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
