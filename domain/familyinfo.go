// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/domain/familyinfo"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// FamilyInfo is the model entity for the FamilyInfo schema.
type FamilyInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 家庭成员姓名
	Name string `json:"name,omitempty"`
	// 与学生关系
	Relationship string `json:"relationship,omitempty"`
	// 身份证号
	IDCard string `json:"id_card,omitempty"`
	// 年龄
	Age string `json:"age,omitempty"`
	// 职业
	Occupation string `json:"occupation,omitempty"`
	// 职务
	Post string `json:"post,omitempty"`
	// 工作单位
	WorkUnit string `json:"work_unit,omitempty"`
	// 联系电话
	ContactNumber string `json:"contact_number,omitempty"`
	// 健康状况
	Health string `json:"health,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FamilyInfoQuery when eager-loading is set.
	Edges               FamilyInfoEdges `json:"edges"`
	family_info_student *int
}

// FamilyInfoEdges holds the relations/edges for other nodes in the graph.
type FamilyInfoEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FamilyInfoEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FamilyInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case familyinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case familyinfo.FieldName, familyinfo.FieldRelationship, familyinfo.FieldIDCard, familyinfo.FieldAge, familyinfo.FieldOccupation, familyinfo.FieldPost, familyinfo.FieldWorkUnit, familyinfo.FieldContactNumber, familyinfo.FieldHealth:
			values[i] = new(sql.NullString)
		case familyinfo.ForeignKeys[0]: // family_info_student
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FamilyInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FamilyInfo fields.
func (fi *FamilyInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case familyinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case familyinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fi.Name = value.String
			}
		case familyinfo.FieldRelationship:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relationship", values[i])
			} else if value.Valid {
				fi.Relationship = value.String
			}
		case familyinfo.FieldIDCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card", values[i])
			} else if value.Valid {
				fi.IDCard = value.String
			}
		case familyinfo.FieldAge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				fi.Age = value.String
			}
		case familyinfo.FieldOccupation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field occupation", values[i])
			} else if value.Valid {
				fi.Occupation = value.String
			}
		case familyinfo.FieldPost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post", values[i])
			} else if value.Valid {
				fi.Post = value.String
			}
		case familyinfo.FieldWorkUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_unit", values[i])
			} else if value.Valid {
				fi.WorkUnit = value.String
			}
		case familyinfo.FieldContactNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_number", values[i])
			} else if value.Valid {
				fi.ContactNumber = value.String
			}
		case familyinfo.FieldHealth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field health", values[i])
			} else if value.Valid {
				fi.Health = value.String
			}
		case familyinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field family_info_student", value)
			} else if value.Valid {
				fi.family_info_student = new(int)
				*fi.family_info_student = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the FamilyInfo entity.
func (fi *FamilyInfo) QueryStudent() *StudentQuery {
	return NewFamilyInfoClient(fi.config).QueryStudent(fi)
}

// Update returns a builder for updating this FamilyInfo.
// Note that you need to call FamilyInfo.Unwrap() before calling this method if this FamilyInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FamilyInfo) Update() *FamilyInfoUpdateOne {
	return NewFamilyInfoClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FamilyInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FamilyInfo) Unwrap() *FamilyInfo {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("domain: FamilyInfo is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FamilyInfo) String() string {
	var builder strings.Builder
	builder.WriteString("FamilyInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("name=")
	builder.WriteString(fi.Name)
	builder.WriteString(", ")
	builder.WriteString("relationship=")
	builder.WriteString(fi.Relationship)
	builder.WriteString(", ")
	builder.WriteString("id_card=")
	builder.WriteString(fi.IDCard)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fi.Age)
	builder.WriteString(", ")
	builder.WriteString("occupation=")
	builder.WriteString(fi.Occupation)
	builder.WriteString(", ")
	builder.WriteString("post=")
	builder.WriteString(fi.Post)
	builder.WriteString(", ")
	builder.WriteString("work_unit=")
	builder.WriteString(fi.WorkUnit)
	builder.WriteString(", ")
	builder.WriteString("contact_number=")
	builder.WriteString(fi.ContactNumber)
	builder.WriteString(", ")
	builder.WriteString("health=")
	builder.WriteString(fi.Health)
	builder.WriteByte(')')
	return builder.String()
}

// FamilyInfos is a parsable slice of FamilyInfo.
type FamilyInfos []*FamilyInfo
