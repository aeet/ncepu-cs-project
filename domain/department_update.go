// Code generated by ent, DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devcui/ncepu-cs-project/domain/class"
	"github.com/devcui/ncepu-cs-project/domain/department"
	"github.com/devcui/ncepu-cs-project/domain/major"
	"github.com/devcui/ncepu-cs-project/domain/predicate"
	"github.com/devcui/ncepu-cs-project/domain/student"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DepartmentUpdate) SetName(s string) *DepartmentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetCode sets the "code" field.
func (du *DepartmentUpdate) SetCode(s string) *DepartmentUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetDescription sets the "description" field.
func (du *DepartmentUpdate) SetDescription(s string) *DepartmentUpdate {
	du.mutation.SetDescription(s)
	return du
}

// AddMajorIDs adds the "major" edge to the Major entity by IDs.
func (du *DepartmentUpdate) AddMajorIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddMajorIDs(ids...)
	return du
}

// AddMajor adds the "major" edges to the Major entity.
func (du *DepartmentUpdate) AddMajor(m ...*Major) *DepartmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMajorIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (du *DepartmentUpdate) AddClasIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddClasIDs(ids...)
	return du
}

// AddClass adds the "class" edges to the Class entity.
func (du *DepartmentUpdate) AddClass(c ...*Class) *DepartmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddClasIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (du *DepartmentUpdate) AddStudentIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddStudentIDs(ids...)
	return du
}

// AddStudent adds the "student" edges to the Student entity.
func (du *DepartmentUpdate) AddStudent(s ...*Student) *DepartmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddStudentIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// ClearMajor clears all "major" edges to the Major entity.
func (du *DepartmentUpdate) ClearMajor() *DepartmentUpdate {
	du.mutation.ClearMajor()
	return du
}

// RemoveMajorIDs removes the "major" edge to Major entities by IDs.
func (du *DepartmentUpdate) RemoveMajorIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemoveMajorIDs(ids...)
	return du
}

// RemoveMajor removes "major" edges to Major entities.
func (du *DepartmentUpdate) RemoveMajor(m ...*Major) *DepartmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMajorIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (du *DepartmentUpdate) ClearClass() *DepartmentUpdate {
	du.mutation.ClearClass()
	return du
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (du *DepartmentUpdate) RemoveClasIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemoveClasIDs(ids...)
	return du
}

// RemoveClass removes "class" edges to Class entities.
func (du *DepartmentUpdate) RemoveClass(c ...*Class) *DepartmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveClasIDs(ids...)
}

// ClearStudent clears all "student" edges to the Student entity.
func (du *DepartmentUpdate) ClearStudent() *DepartmentUpdate {
	du.mutation.ClearStudent()
	return du
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (du *DepartmentUpdate) RemoveStudentIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemoveStudentIDs(ids...)
	return du
}

// RemoveStudent removes "student" edges to Student entities.
func (du *DepartmentUpdate) RemoveStudent(s ...*Student) *DepartmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DepartmentMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.SetField(department.FieldCode, field.TypeString, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
	}
	if du.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.MajorTable,
			Columns: []string{department.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedMajorIDs(); len(nodes) > 0 && !du.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.MajorTable,
			Columns: []string{department.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.MajorTable,
			Columns: []string{department.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.ClassTable,
			Columns: []string{department.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedClassIDs(); len(nodes) > 0 && !du.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.ClassTable,
			Columns: []string{department.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.ClassTable,
			Columns: []string{department.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.StudentTable,
			Columns: []string{department.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedStudentIDs(); len(nodes) > 0 && !du.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.StudentTable,
			Columns: []string{department.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.StudentTable,
			Columns: []string{department.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetName sets the "name" field.
func (duo *DepartmentUpdateOne) SetName(s string) *DepartmentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetCode sets the "code" field.
func (duo *DepartmentUpdateOne) SetCode(s string) *DepartmentUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetDescription sets the "description" field.
func (duo *DepartmentUpdateOne) SetDescription(s string) *DepartmentUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// AddMajorIDs adds the "major" edge to the Major entity by IDs.
func (duo *DepartmentUpdateOne) AddMajorIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddMajorIDs(ids...)
	return duo
}

// AddMajor adds the "major" edges to the Major entity.
func (duo *DepartmentUpdateOne) AddMajor(m ...*Major) *DepartmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMajorIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (duo *DepartmentUpdateOne) AddClasIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddClasIDs(ids...)
	return duo
}

// AddClass adds the "class" edges to the Class entity.
func (duo *DepartmentUpdateOne) AddClass(c ...*Class) *DepartmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddClasIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (duo *DepartmentUpdateOne) AddStudentIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddStudentIDs(ids...)
	return duo
}

// AddStudent adds the "student" edges to the Student entity.
func (duo *DepartmentUpdateOne) AddStudent(s ...*Student) *DepartmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddStudentIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// ClearMajor clears all "major" edges to the Major entity.
func (duo *DepartmentUpdateOne) ClearMajor() *DepartmentUpdateOne {
	duo.mutation.ClearMajor()
	return duo
}

// RemoveMajorIDs removes the "major" edge to Major entities by IDs.
func (duo *DepartmentUpdateOne) RemoveMajorIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemoveMajorIDs(ids...)
	return duo
}

// RemoveMajor removes "major" edges to Major entities.
func (duo *DepartmentUpdateOne) RemoveMajor(m ...*Major) *DepartmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMajorIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (duo *DepartmentUpdateOne) ClearClass() *DepartmentUpdateOne {
	duo.mutation.ClearClass()
	return duo
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (duo *DepartmentUpdateOne) RemoveClasIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemoveClasIDs(ids...)
	return duo
}

// RemoveClass removes "class" edges to Class entities.
func (duo *DepartmentUpdateOne) RemoveClass(c ...*Class) *DepartmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveClasIDs(ids...)
}

// ClearStudent clears all "student" edges to the Student entity.
func (duo *DepartmentUpdateOne) ClearStudent() *DepartmentUpdateOne {
	duo.mutation.ClearStudent()
	return duo
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (duo *DepartmentUpdateOne) RemoveStudentIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemoveStudentIDs(ids...)
	return duo
}

// RemoveStudent removes "student" edges to Student entities.
func (duo *DepartmentUpdateOne) RemoveStudent(s ...*Student) *DepartmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveStudentIDs(ids...)
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (duo *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Department entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	return withHooks[*Department, DepartmentMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`domain: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("domain: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Code(); ok {
		_spec.SetField(department.FieldCode, field.TypeString, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.MajorTable,
			Columns: []string{department.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedMajorIDs(); len(nodes) > 0 && !duo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.MajorTable,
			Columns: []string{department.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.MajorTable,
			Columns: []string{department.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.ClassTable,
			Columns: []string{department.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedClassIDs(); len(nodes) > 0 && !duo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.ClassTable,
			Columns: []string{department.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.ClassTable,
			Columns: []string{department.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.StudentTable,
			Columns: []string{department.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedStudentIDs(); len(nodes) > 0 && !duo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.StudentTable,
			Columns: []string{department.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.StudentTable,
			Columns: []string{department.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Department{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
