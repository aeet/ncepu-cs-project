// Code generated by ent, DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/devcui/ncepu-cs-project/ncu-domain/domain/resource"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceName holds the value of the "resource_name" field.
	ResourceName string `json:"resource_name,omitempty"`
	// ResourceValue holds the value of the "resource_value" field.
	ResourceValue string `json:"resource_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges ResourceEdges `json:"edges"`
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Role holds the value of the role edge.
	Role []*Role `json:"role,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Authorization holds the value of the authorization edge.
	Authorization []*Authorization `json:"authorization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) RoleOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AuthorizationOrErr returns the Authorization value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) AuthorizationOrErr() ([]*Authorization, error) {
	if e.loadedTypes[2] {
		return e.Authorization, nil
	}
	return nil, &NotLoadedError{edge: "authorization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			values[i] = new(sql.NullInt64)
		case resource.FieldResourceName, resource.FieldResourceValue:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Resource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resource.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				r.ResourceName = value.String
			}
		case resource.FieldResourceValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_value", values[i])
			} else if value.Valid {
				r.ResourceValue = value.String
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the Resource entity.
func (r *Resource) QueryRole() *RoleQuery {
	return NewResourceClient(r.config).QueryRole(r)
}

// QueryUser queries the "user" edge of the Resource entity.
func (r *Resource) QueryUser() *UserQuery {
	return NewResourceClient(r.config).QueryUser(r)
}

// QueryAuthorization queries the "authorization" edge of the Resource entity.
func (r *Resource) QueryAuthorization() *AuthorizationQuery {
	return NewResourceClient(r.config).QueryAuthorization(r)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return NewResourceClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("domain: Resource is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("resource_name=")
	builder.WriteString(r.ResourceName)
	builder.WriteString(", ")
	builder.WriteString("resource_value=")
	builder.WriteString(r.ResourceValue)
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource
