// Code generated by ent, DO NOT EDIT.

package domain

import (
	"github.com/devcui/ncepu-cs-project/ncu-domain/domain/authorization"
	"github.com/devcui/ncepu-cs-project/ncu-domain/domain/resource"
	"github.com/devcui/ncepu-cs-project/ncu-domain/domain/role"
	"github.com/devcui/ncepu-cs-project/ncu-domain/domain/schema"
	"github.com/devcui/ncepu-cs-project/ncu-domain/domain/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authorizationFields := schema.Authorization{}.Fields()
	_ = authorizationFields
	// authorizationDescClientID is the schema descriptor for client_id field.
	authorizationDescClientID := authorizationFields[0].Descriptor()
	// authorization.ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	authorization.ClientIDValidator = authorizationDescClientID.Validators[0].(func(string) error)
	// authorizationDescClientSecret is the schema descriptor for client_secret field.
	authorizationDescClientSecret := authorizationFields[1].Descriptor()
	// authorization.ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	authorization.ClientSecretValidator = authorizationDescClientSecret.Validators[0].(func(string) error)
	// authorizationDescClientName is the schema descriptor for client_name field.
	authorizationDescClientName := authorizationFields[2].Descriptor()
	// authorization.ClientNameValidator is a validator for the "client_name" field. It is called by the builders before save.
	authorization.ClientNameValidator = authorizationDescClientName.Validators[0].(func(string) error)
	resourceFields := schema.Resource{}.Fields()
	_ = resourceFields
	// resourceDescResourceName is the schema descriptor for resource_name field.
	resourceDescResourceName := resourceFields[0].Descriptor()
	// resource.ResourceNameValidator is a validator for the "resource_name" field. It is called by the builders before save.
	resource.ResourceNameValidator = resourceDescResourceName.Validators[0].(func(string) error)
	// resourceDescResourceValue is the schema descriptor for resource_value field.
	resourceDescResourceValue := resourceFields[1].Descriptor()
	// resource.ResourceValueValidator is a validator for the "resource_value" field. It is called by the builders before save.
	resource.ResourceValueValidator = resourceDescResourceValue.Validators[0].(func(string) error)
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescRoleName is the schema descriptor for role_name field.
	roleDescRoleName := roleFields[0].Descriptor()
	// role.RoleNameValidator is a validator for the "role_name" field. It is called by the builders before save.
	role.RoleNameValidator = roleDescRoleName.Validators[0].(func(string) error)
	// roleDescRoleValue is the schema descriptor for role_value field.
	roleDescRoleValue := roleFields[1].Descriptor()
	// role.RoleValueValidator is a validator for the "role_value" field. It is called by the builders before save.
	role.RoleValueValidator = roleDescRoleValue.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAccount is the schema descriptor for account field.
	userDescAccount := userFields[0].Descriptor()
	// user.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	user.AccountValidator = userDescAccount.Validators[0].(func(string) error)
	// userDescPasswd is the schema descriptor for passwd field.
	userDescPasswd := userFields[1].Descriptor()
	// user.PasswdValidator is a validator for the "passwd" field. It is called by the builders before save.
	user.PasswdValidator = userDescPasswd.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
